/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package MTMS;

import java.util.ArrayList;
import java.util.Date;
import java.util.regex.*;
import java.text.SimpleDateFormat;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * Created by Hui Guo
 * April, 2013
 * Course Project, CSCI 6230
 * 
 * 
 * comments by Yuan He
 */

public class MTMS_GUI extends javax.swing.JFrame {

    /**
     * Creates new form MTMS_GUI
     */
    
    public MTMS_Login fromLogin = null;
    public User ThisUser = new User();
    
    public String DBName = "MTMS";
    public String DBAccount = "root";
    public String DBPwd = "mysql";
    
    public ArrayList ReturnedPatients = new ArrayList();
    public ArrayList ReturnedTests = new ArrayList();
    public ArrayList ReturnedUsers = new ArrayList();
    
    public Test SelectedTest = new Test();
    
    public MTMS_GUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tbpMain = new javax.swing.JTabbedPane();
        pnlUserInfo = new javax.swing.JPanel();
        pnlUserBasics = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        tbxUserID = new javax.swing.JTextField();
        tbxUserName = new javax.swing.JTextField();
        lblUserRole = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        pnlUserOthers = new javax.swing.JPanel();
        tbxFirstName = new javax.swing.JTextField();
        tbxLastName = new javax.swing.JTextField();
        tbxBirthDate = new javax.swing.JTextField();
        tbxAddress1 = new javax.swing.JTextField();
        tbxAddress2 = new javax.swing.JTextField();
        tbxZipcode = new javax.swing.JTextField();
        tbxPhone = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        btnEditOthers = new javax.swing.JButton();
        jLabel60 = new javax.swing.JLabel();
        jLabel61 = new javax.swing.JLabel();
        jLabel62 = new javax.swing.JLabel();
        lblInfo = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel13 = new javax.swing.JLabel();
        tbxOldPwd = new javax.swing.JPasswordField();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        tbxNewPwd1 = new javax.swing.JPasswordField();
        tbxNewPwd2 = new javax.swing.JPasswordField();
        btnChangePwd = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        lblHint = new javax.swing.JLabel();
        pnlPatientOps = new javax.swing.JPanel();
        pnlPatientInfo = new javax.swing.JPanel();
        jLabel17 = new javax.swing.JLabel();
        lblPID = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        tbxPFirstName = new javax.swing.JTextField();
        jLabel19 = new javax.swing.JLabel();
        tbxPLastName = new javax.swing.JTextField();
        jLabel20 = new javax.swing.JLabel();
        cbxPGender = new javax.swing.JComboBox();
        jLabel21 = new javax.swing.JLabel();
        tbxPBirthDate = new javax.swing.JTextField();
        jLabel22 = new javax.swing.JLabel();
        tbxPAddress1 = new javax.swing.JTextField();
        tbxPAddress2 = new javax.swing.JTextField();
        jLabel23 = new javax.swing.JLabel();
        tbxPZipcode = new javax.swing.JTextField();
        jLabel24 = new javax.swing.JLabel();
        tbxPPhone = new javax.swing.JTextField();
        jLabel25 = new javax.swing.JLabel();
        tbxPDoctorID = new javax.swing.JTextField();
        btnPCreate = new javax.swing.JButton();
        btnPUpdate = new javax.swing.JButton();
        btnPDelete = new javax.swing.JButton();
        btnPClear = new javax.swing.JButton();
        lblPHint = new javax.swing.JLabel();
        jLabel63 = new javax.swing.JLabel();
        jLabel64 = new javax.swing.JLabel();
        jLabel65 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        btnTestOrder1 = new javax.swing.JButton();
        btnSearchTestByP = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        jLabel16 = new javax.swing.JLabel();
        cbxPSearchType = new javax.swing.JComboBox();
        tbxPSearch = new javax.swing.JTextField();
        btnPSearch = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        lslPatients = new javax.swing.JList();
        pnlTestOps = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jLabel26 = new javax.swing.JLabel();
        cbxTSearchType = new javax.swing.JComboBox();
        tbxTSearch = new javax.swing.JTextField();
        btnTSearch = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblTests = new javax.swing.JTable();
        btnFillResult = new javax.swing.JButton();
        pnlTestInfo = new javax.swing.JPanel();
        jLabel27 = new javax.swing.JLabel();
        lblTestID = new javax.swing.JLabel();
        jLabel28 = new javax.swing.JLabel();
        tbxTestType = new javax.swing.JTextField();
        jLabel29 = new javax.swing.JLabel();
        tbxOrderDate = new javax.swing.JTextField();
        jLabel30 = new javax.swing.JLabel();
        lblTStatus = new javax.swing.JLabel();
        jLabel31 = new javax.swing.JLabel();
        tbxUpdater = new javax.swing.JTextField();
        btnTDelete = new javax.swing.JButton();
        jLabel35 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tbxTestDes = new javax.swing.JTextArea();
        btnTUpdate = new javax.swing.JButton();
        pnlNewTest = new javax.swing.JPanel();
        jLabel32 = new javax.swing.JLabel();
        tbxNTestType = new javax.swing.JTextField();
        jLabel33 = new javax.swing.JLabel();
        tbxNPatientID = new javax.swing.JTextField();
        jLabel34 = new javax.swing.JLabel();
        tbxNDoctorID = new javax.swing.JTextField();
        jLabel36 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        tbxTestDes2 = new javax.swing.JTextArea();
        btnOrderTest = new javax.swing.JButton();
        btnTClear = new javax.swing.JButton();
        jLabel55 = new javax.swing.JLabel();
        jLabel56 = new javax.swing.JLabel();
        pnlReportOps = new javax.swing.JPanel();
        jLabel37 = new javax.swing.JLabel();
        lblRRStyle = new javax.swing.JLabel();
        jLabel39 = new javax.swing.JLabel();
        jPanel7 = new javax.swing.JPanel();
        jLabel38 = new javax.swing.JLabel();
        tbxResultStatus = new javax.swing.JTextField();
        jScrollPane5 = new javax.swing.JScrollPane();
        tbxResult = new javax.swing.JTextArea();
        btnInputResult = new javax.swing.JButton();
        pnlReport = new javax.swing.JPanel();
        jLabel41 = new javax.swing.JLabel();
        tbxReportStatus = new javax.swing.JTextField();
        btnInputReport = new javax.swing.JButton();
        jScrollPane6 = new javax.swing.JScrollPane();
        tbxReport = new javax.swing.JTextArea();
        btnClearReport = new javax.swing.JButton();
        btnFull = new javax.swing.JButton();
        tbxTestID = new javax.swing.JTextField();
        btnRetrieveTest = new javax.swing.JButton();
        pnlUserOps = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jLabel43 = new javax.swing.JLabel();
        cbxUSearchType = new javax.swing.JComboBox();
        tbxUSearch = new javax.swing.JTextField();
        btnUSearch = new javax.swing.JButton();
        jScrollPane7 = new javax.swing.JScrollPane();
        tblUsers = new javax.swing.JTable();
        jPanel5 = new javax.swing.JPanel();
        jLabel44 = new javax.swing.JLabel();
        tbxUUserID = new javax.swing.JTextField();
        jLabel45 = new javax.swing.JLabel();
        tbxUFirstName = new javax.swing.JTextField();
        tbxULastName = new javax.swing.JTextField();
        jLabel46 = new javax.swing.JLabel();
        jLabel47 = new javax.swing.JLabel();
        tbxUBirthDate = new javax.swing.JTextField();
        jLabel48 = new javax.swing.JLabel();
        lblUEnrollDate = new javax.swing.JLabel();
        tbxUAddress1 = new javax.swing.JTextField();
        jLabel50 = new javax.swing.JLabel();
        tbxUAddress2 = new javax.swing.JTextField();
        jLabel51 = new javax.swing.JLabel();
        tbxUZipcode = new javax.swing.JTextField();
        jLabel52 = new javax.swing.JLabel();
        tbxUPhone = new javax.swing.JTextField();
        jLabel53 = new javax.swing.JLabel();
        cbxUUserType = new javax.swing.JComboBox();
        btnUAdd = new javax.swing.JButton();
        btnUUpdate = new javax.swing.JButton();
        btnUDelete = new javax.swing.JButton();
        btnReset = new javax.swing.JButton();
        jLabel49 = new javax.swing.JLabel();
        jLabel57 = new javax.swing.JLabel();
        jLabel58 = new javax.swing.JLabel();
        jLabel59 = new javax.swing.JLabel();
        tbxUPwd = new javax.swing.JTextField();
        btnClear = new javax.swing.JButton();
        jLabel54 = new javax.swing.JLabel();
        lblUHint = new javax.swing.JLabel();
        btnLogout = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        lblLoginName = new javax.swing.JLabel();
        tbxError = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Welcome to MTMS!");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        tbpMain.setToolTipText("My Info");

        pnlUserBasics.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel3.setText("ID:");

        jLabel4.setText("Name:");

        jLabel5.setText("Role:");

        tbxUserID.setText("00000");
        tbxUserID.setPreferredSize(null);
        tbxUserID.setRequestFocusEnabled(false);

        tbxUserName.setEditable(false);
        tbxUserName.setText("Guest");
        tbxUserName.setPreferredSize(null);

        lblUserRole.setText("Guest");

        jLabel9.setText("Enrolled since 01/01/2000");

        org.jdesktop.layout.GroupLayout pnlUserBasicsLayout = new org.jdesktop.layout.GroupLayout(pnlUserBasics);
        pnlUserBasics.setLayout(pnlUserBasicsLayout);
        pnlUserBasicsLayout.setHorizontalGroup(
            pnlUserBasicsLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, pnlUserBasicsLayout.createSequentialGroup()
                .addContainerGap()
                .add(pnlUserBasicsLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jLabel5)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, pnlUserBasicsLayout.createSequentialGroup()
                        .add(pnlUserBasicsLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jLabel4)
                            .add(jLabel3))
                        .add(18, 18, 18)
                        .add(pnlUserBasicsLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(tbxUserID, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 131, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(tbxUserName, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 131, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(lblUserRole)
                            .add(jLabel9))))
                .addContainerGap(55, Short.MAX_VALUE))
        );
        pnlUserBasicsLayout.setVerticalGroup(
            pnlUserBasicsLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(pnlUserBasicsLayout.createSequentialGroup()
                .addContainerGap()
                .add(pnlUserBasicsLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel3)
                    .add(tbxUserID, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(pnlUserBasicsLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel4)
                    .add(tbxUserName, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jLabel9)
                .add(14, 14, 14)
                .add(pnlUserBasicsLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(lblUserRole)
                    .add(jLabel5))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pnlUserOthers.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        pnlUserOthers.setPreferredSize(new java.awt.Dimension(250, 270));

        tbxAddress2.setPreferredSize(null);

        jLabel6.setText("First Name:");

        jLabel7.setText("Last Name:");

        jLabel8.setText("Birth Date:");

        jLabel10.setText("Address:");

        jLabel11.setText("Zipcode:");

        jLabel12.setText("Phone #:");

        btnEditOthers.setText("Update");
        btnEditOthers.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditOthersActionPerformed(evt);
            }
        });

        jLabel60.setText("Format: YYYY/MM/DD");

        jLabel61.setText("Format: 27858");

        jLabel62.setText("Format: 252-123-4567");

        org.jdesktop.layout.GroupLayout pnlUserOthersLayout = new org.jdesktop.layout.GroupLayout(pnlUserOthers);
        pnlUserOthers.setLayout(pnlUserOthersLayout);
        pnlUserOthersLayout.setHorizontalGroup(
            pnlUserOthersLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(pnlUserOthersLayout.createSequentialGroup()
                .addContainerGap()
                .add(pnlUserOthersLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(pnlUserOthersLayout.createSequentialGroup()
                        .add(pnlUserOthersLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jLabel8)
                            .add(jLabel6)
                            .add(jLabel7)
                            .add(jLabel10)
                            .add(jLabel11)
                            .add(jLabel12))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(pnlUserOthersLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, tbxBirthDate)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, tbxAddress1)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, tbxAddress2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, tbxFirstName)
                            .add(tbxLastName)
                            .add(pnlUserOthersLayout.createSequentialGroup()
                                .add(pnlUserOthersLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(jLabel61)
                                    .add(jLabel60)
                                    .add(tbxZipcode, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                    .add(tbxPhone, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 152, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                    .add(jLabel62))
                                .add(0, 127, Short.MAX_VALUE))))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, pnlUserOthersLayout.createSequentialGroup()
                        .add(0, 0, Short.MAX_VALUE)
                        .add(btnEditOthers)))
                .addContainerGap())
        );
        pnlUserOthersLayout.setVerticalGroup(
            pnlUserOthersLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(pnlUserOthersLayout.createSequentialGroup()
                .addContainerGap()
                .add(pnlUserOthersLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(pnlUserOthersLayout.createSequentialGroup()
                        .add(60, 60, 60)
                        .add(tbxBirthDate, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jLabel60)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(pnlUserOthersLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(tbxAddress1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jLabel10))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(tbxAddress2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(pnlUserOthersLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(tbxZipcode, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jLabel11)))
                    .add(pnlUserOthersLayout.createSequentialGroup()
                        .add(pnlUserOthersLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jLabel6)
                            .add(tbxFirstName, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .add(4, 4, 4)
                        .add(pnlUserOthersLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jLabel7)
                            .add(tbxLastName, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(jLabel8)))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jLabel61)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(pnlUserOthersLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(tbxPhone, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel12))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(jLabel62)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(btnEditOthers)
                .add(11, 11, 11))
        );

        lblInfo.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lblInfo.setText("Guest's Information");

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel13.setText("Old Password:");

        jLabel14.setText("New Password:");

        jLabel15.setText("Comfirm:");

        btnChangePwd.setText("Change Password");
        btnChangePwd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChangePwdActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel2Layout = new org.jdesktop.layout.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel2Layout.createSequentialGroup()
                        .add(0, 123, Short.MAX_VALUE)
                        .add(btnChangePwd))
                    .add(jPanel2Layout.createSequentialGroup()
                        .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jLabel13)
                            .add(jLabel14)
                            .add(jLabel15))
                        .add(13, 13, 13)
                        .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(tbxNewPwd2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 170, Short.MAX_VALUE)
                            .add(tbxNewPwd1)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, tbxOldPwd))))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel13)
                    .add(tbxOldPwd, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(tbxNewPwd1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel14))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(tbxNewPwd2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel15))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(btnChangePwd)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel2.setText("Other Details:");

        lblHint.setForeground(new java.awt.Color(0, 153, 51));
        lblHint.setText("Wrong Format. Example: 00000");

        org.jdesktop.layout.GroupLayout pnlUserInfoLayout = new org.jdesktop.layout.GroupLayout(pnlUserInfo);
        pnlUserInfo.setLayout(pnlUserInfoLayout);
        pnlUserInfoLayout.setHorizontalGroup(
            pnlUserInfoLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(pnlUserInfoLayout.createSequentialGroup()
                .addContainerGap()
                .add(pnlUserInfoLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(pnlUserInfoLayout.createSequentialGroup()
                        .add(pnlUserInfoLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                            .add(org.jdesktop.layout.GroupLayout.LEADING, lblInfo)
                            .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(org.jdesktop.layout.GroupLayout.LEADING, pnlUserBasics, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(pnlUserInfoLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(pnlUserInfoLayout.createSequentialGroup()
                                .add(jLabel2)
                                .add(0, 0, Short.MAX_VALUE))
                            .add(pnlUserOthers, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 373, Short.MAX_VALUE)))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, pnlUserInfoLayout.createSequentialGroup()
                        .add(0, 0, Short.MAX_VALUE)
                        .add(lblHint)))
                .addContainerGap())
        );
        pnlUserInfoLayout.setVerticalGroup(
            pnlUserInfoLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(pnlUserInfoLayout.createSequentialGroup()
                .addContainerGap()
                .add(pnlUserInfoLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(lblInfo)
                    .add(jLabel2))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(pnlUserInfoLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(pnlUserInfoLayout.createSequentialGroup()
                        .add(pnlUserBasics, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(4, 4, 4)
                        .add(jPanel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 150, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(pnlUserOthers, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 351, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 128, Short.MAX_VALUE)
                .add(lblHint)
                .addContainerGap())
        );

        tbpMain.addTab("My Info", pnlUserInfo);

        pnlPatientInfo.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel17.setText("Patient ID:");

        lblPID.setText("00000");

        jLabel18.setText("First Name:");

        jLabel19.setText("Last Name:");

        jLabel20.setText("Gender:");

        cbxPGender.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Male", "Female" }));

        jLabel21.setText("Birth Date:");

        jLabel22.setText("Address:");

        jLabel23.setText("Zipcode:");

        jLabel24.setText("Phone #:");

        jLabel25.setText("Doctor ID:");

        tbxPDoctorID.setEditable(false);

        btnPCreate.setText("Add Patient");
        btnPCreate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPCreateActionPerformed(evt);
            }
        });

        btnPUpdate.setText("Update");
        btnPUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPUpdateActionPerformed(evt);
            }
        });

        btnPDelete.setText("Delete");
        btnPDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPDeleteActionPerformed(evt);
            }
        });

        btnPClear.setText("Clear");
        btnPClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPClearActionPerformed(evt);
            }
        });

        lblPHint.setForeground(new java.awt.Color(0, 153, 51));
        lblPHint.setText("Wrong format. Example: 00000");

        jLabel63.setText("Format: YYYY/MM/DD");

        jLabel64.setText("Format: 27858");

        jLabel65.setText("Format: 252-123-4567");

        org.jdesktop.layout.GroupLayout pnlPatientInfoLayout = new org.jdesktop.layout.GroupLayout(pnlPatientInfo);
        pnlPatientInfo.setLayout(pnlPatientInfoLayout);
        pnlPatientInfoLayout.setHorizontalGroup(
            pnlPatientInfoLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(pnlPatientInfoLayout.createSequentialGroup()
                .addContainerGap()
                .add(pnlPatientInfoLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(pnlPatientInfoLayout.createSequentialGroup()
                        .add(pnlPatientInfoLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jLabel17)
                            .add(jLabel18)
                            .add(jLabel19))
                        .add(40, 40, 40)
                        .add(pnlPatientInfoLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(tbxPFirstName)
                            .add(pnlPatientInfoLayout.createSequentialGroup()
                                .add(lblPID)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .add(btnPClear))
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, tbxPLastName)))
                    .add(pnlPatientInfoLayout.createSequentialGroup()
                        .add(pnlPatientInfoLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jLabel22)
                            .add(jLabel23)
                            .add(jLabel24))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(pnlPatientInfoLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(tbxPAddress2)
                            .add(tbxPAddress1)))
                    .add(pnlPatientInfoLayout.createSequentialGroup()
                        .add(pnlPatientInfoLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(pnlPatientInfoLayout.createSequentialGroup()
                                .add(btnPCreate)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(btnPUpdate)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(btnPDelete))
                            .add(pnlPatientInfoLayout.createSequentialGroup()
                                .add(jLabel20)
                                .add(66, 66, 66)
                                .add(cbxPGender, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(pnlPatientInfoLayout.createSequentialGroup()
                                .add(jLabel25)
                                .add(49, 49, 49)
                                .add(pnlPatientInfoLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(tbxPPhone, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 144, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                    .add(tbxPZipcode, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 78, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                    .add(tbxPDoctorID, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 186, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                    .add(jLabel64)
                                    .add(jLabel65))))
                        .add(0, 19, Short.MAX_VALUE))
                    .add(pnlPatientInfoLayout.createSequentialGroup()
                        .add(jLabel21)
                        .add(48, 48, 48)
                        .add(pnlPatientInfoLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(pnlPatientInfoLayout.createSequentialGroup()
                                .add(jLabel63)
                                .add(0, 0, Short.MAX_VALUE))
                            .add(tbxPBirthDate)))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, pnlPatientInfoLayout.createSequentialGroup()
                        .add(0, 0, Short.MAX_VALUE)
                        .add(lblPHint)))
                .addContainerGap())
        );
        pnlPatientInfoLayout.setVerticalGroup(
            pnlPatientInfoLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(pnlPatientInfoLayout.createSequentialGroup()
                .addContainerGap()
                .add(pnlPatientInfoLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel17)
                    .add(lblPID)
                    .add(btnPClear))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(pnlPatientInfoLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel18)
                    .add(tbxPFirstName, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(pnlPatientInfoLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(tbxPLastName, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel19))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(pnlPatientInfoLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(cbxPGender, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel20))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(pnlPatientInfoLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel21)
                    .add(tbxPBirthDate, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jLabel63)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(pnlPatientInfoLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel22)
                    .add(tbxPAddress1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(tbxPAddress2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(pnlPatientInfoLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(tbxPZipcode, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel23))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jLabel64)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(pnlPatientInfoLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(tbxPPhone, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel24))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jLabel65)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(pnlPatientInfoLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(tbxPDoctorID, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel25))
                .add(4, 4, 4)
                .add(pnlPatientInfoLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(btnPCreate)
                    .add(btnPUpdate)
                    .add(btnPDelete))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 58, Short.MAX_VALUE)
                .add(lblPHint)
                .addContainerGap())
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        btnTestOrder1.setText("Order a test");
        btnTestOrder1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTestOrder1ActionPerformed(evt);
            }
        });

        btnSearchTestByP.setText("Search a test");

        org.jdesktop.layout.GroupLayout jPanel3Layout = new org.jdesktop.layout.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .add(btnSearchTestByP, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 150, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 18, Short.MAX_VALUE)
                .add(btnTestOrder1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 147, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(btnTestOrder1)
                    .add(btnSearchTestByP))
                .addContainerGap())
        );

        jPanel6.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel16.setText("Search Patients:");

        cbxPSearchType.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "By ID", "By Doctor", "By Full Name" }));

        btnPSearch.setText("Go");
        btnPSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPSearchActionPerformed(evt);
            }
        });

        lslPatients.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                lslPatientsMousePressed(evt);
            }
        });
        jScrollPane1.setViewportView(lslPatients);

        org.jdesktop.layout.GroupLayout jPanel6Layout = new org.jdesktop.layout.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel6Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel6Layout.createSequentialGroup()
                        .add(jLabel16)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(cbxPSearchType, 0, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .add(jPanel6Layout.createSequentialGroup()
                        .add(jPanel6Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jPanel6Layout.createSequentialGroup()
                                .add(tbxPSearch)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(btnPSearch))
                            .add(jScrollPane1))
                        .addContainerGap())))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel6Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel16)
                    .add(cbxPSearchType, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel6Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(tbxPSearch, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(btnPSearch))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 387, Short.MAX_VALUE)
                .addContainerGap())
        );

        org.jdesktop.layout.GroupLayout pnlPatientOpsLayout = new org.jdesktop.layout.GroupLayout(pnlPatientOps);
        pnlPatientOps.setLayout(pnlPatientOpsLayout);
        pnlPatientOpsLayout.setHorizontalGroup(
            pnlPatientOpsLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(pnlPatientOpsLayout.createSequentialGroup()
                .addContainerGap()
                .add(pnlPatientOpsLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(jPanel6, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(pnlPatientInfo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        pnlPatientOpsLayout.setVerticalGroup(
            pnlPatientOpsLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(pnlPatientOpsLayout.createSequentialGroup()
                .addContainerGap()
                .add(pnlPatientOpsLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(pnlPatientInfo, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(pnlPatientOpsLayout.createSequentialGroup()
                        .add(jPanel6, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        tbpMain.addTab("Patient Operations", pnlPatientOps);

        jPanel4.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel26.setText("Search Tests:");

        cbxTSearchType.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "By test ID", "By patient ID", "By doctor ID" }));

        btnTSearch.setText("Go");
        btnTSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTSearchActionPerformed(evt);
            }
        });

        tblTests.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Test ID", "Patient ID", "Doctor ID", "Test Date"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        tblTests.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                tblTestsMousePressed(evt);
            }
        });
        jScrollPane2.setViewportView(tblTests);

        btnFillResult.setText("Manage Result/Report");
        btnFillResult.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFillResultActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel4Layout = new org.jdesktop.layout.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jScrollPane2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .add(jPanel4Layout.createSequentialGroup()
                        .add(jLabel26)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(cbxTSearchType, 0, 220, Short.MAX_VALUE))
                    .add(jPanel4Layout.createSequentialGroup()
                        .add(tbxTSearch)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(btnTSearch)))
                .addContainerGap())
            .add(org.jdesktop.layout.GroupLayout.TRAILING, btnFillResult, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel26)
                    .add(cbxTSearchType, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(tbxTSearch, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(btnTSearch))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 403, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(btnFillResult)
                .addContainerGap())
        );

        pnlTestInfo.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel27.setText("Test ID:");

        lblTestID.setText("00000");

        jLabel28.setText("Test Type:");

        jLabel29.setText("Order Date:");

        tbxOrderDate.setEditable(false);

        jLabel30.setText("Status:");

        lblTStatus.setText("NONE");

        jLabel31.setText("Last Updater:");

        tbxUpdater.setEditable(false);

        btnTDelete.setText("Delete");
        btnTDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTDeleteActionPerformed(evt);
            }
        });

        jLabel35.setText("Description:");

        jScrollPane3.setHorizontalScrollBar(null);

        tbxTestDes.setColumns(20);
        tbxTestDes.setRows(5);
        jScrollPane3.setViewportView(tbxTestDes);

        btnTUpdate.setText("Update");
        btnTUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTUpdateActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout pnlTestInfoLayout = new org.jdesktop.layout.GroupLayout(pnlTestInfo);
        pnlTestInfo.setLayout(pnlTestInfoLayout);
        pnlTestInfoLayout.setHorizontalGroup(
            pnlTestInfoLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(pnlTestInfoLayout.createSequentialGroup()
                .addContainerGap()
                .add(pnlTestInfoLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, pnlTestInfoLayout.createSequentialGroup()
                        .add(jLabel29)
                        .add(18, 18, 18)
                        .add(tbxOrderDate, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 180, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(org.jdesktop.layout.GroupLayout.LEADING, pnlTestInfoLayout.createSequentialGroup()
                        .add(pnlTestInfoLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jLabel28)
                            .add(jLabel27))
                        .add(25, 25, 25)
                        .add(pnlTestInfoLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(lblTestID)
                            .add(tbxTestType, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 142, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                    .add(org.jdesktop.layout.GroupLayout.LEADING, pnlTestInfoLayout.createSequentialGroup()
                        .add(pnlTestInfoLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jLabel31)
                            .add(jLabel30))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(pnlTestInfoLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(tbxUpdater, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 142, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(lblTStatus))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(pnlTestInfoLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(btnTDelete, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(btnTUpdate, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .add(pnlTestInfoLayout.createSequentialGroup()
                        .add(jLabel35)
                        .add(18, 18, 18)
                        .add(jScrollPane3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        pnlTestInfoLayout.setVerticalGroup(
            pnlTestInfoLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(pnlTestInfoLayout.createSequentialGroup()
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(pnlTestInfoLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, pnlTestInfoLayout.createSequentialGroup()
                        .add(pnlTestInfoLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jLabel27)
                            .add(lblTestID))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(pnlTestInfoLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(tbxTestType, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jLabel28))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(pnlTestInfoLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(tbxOrderDate, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jLabel29))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(pnlTestInfoLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jLabel35)
                            .add(jScrollPane3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 56, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(pnlTestInfoLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jLabel31)
                            .add(tbxUpdater, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(btnTUpdate))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(pnlTestInfoLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(lblTStatus)
                            .add(jLabel30))
                        .add(13, 13, 13))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, pnlTestInfoLayout.createSequentialGroup()
                        .add(btnTDelete)
                        .addContainerGap())))
        );

        pnlNewTest.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel32.setText("Test Type:");

        jLabel33.setText("Patient ID:");

        jLabel34.setText("Doctor ID:");

        tbxNDoctorID.setEditable(false);

        jLabel36.setText("Description:");

        jScrollPane4.setHorizontalScrollBar(null);

        tbxTestDes2.setColumns(20);
        tbxTestDes2.setRows(5);
        jScrollPane4.setViewportView(tbxTestDes2);

        btnOrderTest.setText("Order");
        btnOrderTest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOrderTestActionPerformed(evt);
            }
        });

        btnTClear.setText("Clear");
        btnTClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTClearActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout pnlNewTestLayout = new org.jdesktop.layout.GroupLayout(pnlNewTest);
        pnlNewTest.setLayout(pnlNewTestLayout);
        pnlNewTestLayout.setHorizontalGroup(
            pnlNewTestLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(pnlNewTestLayout.createSequentialGroup()
                .addContainerGap()
                .add(pnlNewTestLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(pnlNewTestLayout.createSequentialGroup()
                        .add(pnlNewTestLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(pnlNewTestLayout.createSequentialGroup()
                                .add(jLabel34)
                                .add(26, 26, 26)
                                .add(tbxNDoctorID, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 142, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(pnlNewTestLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                                .add(org.jdesktop.layout.GroupLayout.TRAILING, pnlNewTestLayout.createSequentialGroup()
                                    .add(jLabel32)
                                    .add(26, 26, 26)
                                    .add(tbxNTestType, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 142, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                .add(pnlNewTestLayout.createSequentialGroup()
                                    .add(jLabel33)
                                    .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .add(tbxNPatientID, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 142, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(pnlNewTestLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(btnTClear, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(btnOrderTest, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 86, Short.MAX_VALUE)))
                    .add(pnlNewTestLayout.createSequentialGroup()
                        .add(jLabel36)
                        .add(18, 18, 18)
                        .add(jScrollPane4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        pnlNewTestLayout.setVerticalGroup(
            pnlNewTestLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(pnlNewTestLayout.createSequentialGroup()
                .addContainerGap()
                .add(pnlNewTestLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(pnlNewTestLayout.createSequentialGroup()
                        .add(pnlNewTestLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(tbxNTestType, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(btnTClear))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(pnlNewTestLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(tbxNPatientID, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jLabel33)
                            .add(btnOrderTest)))
                    .add(jLabel32))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(pnlNewTestLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel34)
                    .add(tbxNDoctorID, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(pnlNewTestLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(pnlNewTestLayout.createSequentialGroup()
                        .add(jLabel36)
                        .add(0, 0, Short.MAX_VALUE))
                    .add(jScrollPane4, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 118, Short.MAX_VALUE))
                .addContainerGap())
        );

        jLabel55.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        jLabel55.setText("Order A Test");

        jLabel56.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        jLabel56.setText("Test Information");

        org.jdesktop.layout.GroupLayout pnlTestOpsLayout = new org.jdesktop.layout.GroupLayout(pnlTestOps);
        pnlTestOps.setLayout(pnlTestOpsLayout);
        pnlTestOpsLayout.setHorizontalGroup(
            pnlTestOpsLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(pnlTestOpsLayout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel4, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(pnlTestOpsLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(pnlTestOpsLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                        .add(pnlTestOpsLayout.createSequentialGroup()
                            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                            .add(jLabel56))
                        .add(org.jdesktop.layout.GroupLayout.TRAILING, pnlTestOpsLayout.createSequentialGroup()
                            .add(4, 4, 4)
                            .add(pnlTestInfo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                    .add(pnlTestOpsLayout.createSequentialGroup()
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(pnlTestOpsLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jLabel55)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, pnlNewTest, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
        pnlTestOpsLayout.setVerticalGroup(
            pnlTestOpsLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(pnlTestOpsLayout.createSequentialGroup()
                .addContainerGap()
                .add(pnlTestOpsLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(pnlTestOpsLayout.createSequentialGroup()
                        .add(jLabel56)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(pnlTestInfo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 231, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jLabel55)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(pnlNewTest, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .add(jPanel4, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        tbpMain.addTab("Test Operations", pnlTestOps);

        jLabel37.setText("Test ID:");

        lblRRStyle.setForeground(new java.awt.Color(0, 153, 51));
        lblRRStyle.setText("NONE");

        jLabel39.setText("Status:");

        jPanel7.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel38.setText("Result Status:");

        tbxResultStatus.setEditable(false);
        tbxResultStatus.setText("Not updated");

        jScrollPane5.setHorizontalScrollBar(null);

        tbxResult.setColumns(20);
        tbxResult.setFont(new java.awt.Font("Courier New", 0, 13)); // NOI18N
        tbxResult.setRows(5);
        tbxResult.setWrapStyleWord(true);
        jScrollPane5.setViewportView(tbxResult);

        btnInputResult.setText("Update");
        btnInputResult.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInputResultActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel7Layout = new org.jdesktop.layout.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel7Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel7Layout.createSequentialGroup()
                        .add(jLabel38)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(tbxResultStatus, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 109, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(btnInputResult, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 80, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(jScrollPane5, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 652, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel7Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel38)
                    .add(tbxResultStatus, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(btnInputResult))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane5, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 168, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pnlReport.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel41.setText("Report Status:");

        tbxReportStatus.setEditable(false);
        tbxReportStatus.setText("Not updated");

        btnInputReport.setText("Update");
        btnInputReport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInputReportActionPerformed(evt);
            }
        });

        jScrollPane6.setHorizontalScrollBar(null);

        tbxReport.setColumns(20);
        tbxReport.setFont(new java.awt.Font("Courier New", 0, 13)); // NOI18N
        tbxReport.setRows(5);
        tbxReport.setWrapStyleWord(true);
        jScrollPane6.setViewportView(tbxReport);

        btnClearReport.setText("Back");
        btnClearReport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearReportActionPerformed(evt);
            }
        });

        btnFull.setText("Full Report");
        btnFull.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFullActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout pnlReportLayout = new org.jdesktop.layout.GroupLayout(pnlReport);
        pnlReport.setLayout(pnlReportLayout);
        pnlReportLayout.setHorizontalGroup(
            pnlReportLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(pnlReportLayout.createSequentialGroup()
                .addContainerGap()
                .add(pnlReportLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jScrollPane6, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 652, Short.MAX_VALUE)
                    .add(pnlReportLayout.createSequentialGroup()
                        .add(jLabel41)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(tbxReportStatus, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 107, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(btnInputReport, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 80, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(btnClearReport)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(btnFull)))
                .addContainerGap())
        );
        pnlReportLayout.setVerticalGroup(
            pnlReportLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(pnlReportLayout.createSequentialGroup()
                .addContainerGap()
                .add(pnlReportLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel41)
                    .add(tbxReportStatus, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(btnInputReport)
                    .add(btnClearReport)
                    .add(btnFull))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane6, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 209, Short.MAX_VALUE)
                .addContainerGap())
        );

        btnRetrieveTest.setText("Change");
        btnRetrieveTest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRetrieveTestActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout pnlReportOpsLayout = new org.jdesktop.layout.GroupLayout(pnlReportOps);
        pnlReportOps.setLayout(pnlReportOpsLayout);
        pnlReportOpsLayout.setHorizontalGroup(
            pnlReportOpsLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(pnlReportOpsLayout.createSequentialGroup()
                .add(14, 14, 14)
                .add(jLabel37)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(tbxTestID, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 86, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(btnRetrieveTest)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jLabel39)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(lblRRStyle)
                .add(0, 0, Short.MAX_VALUE))
            .add(org.jdesktop.layout.GroupLayout.TRAILING, pnlReportOpsLayout.createSequentialGroup()
                .addContainerGap()
                .add(pnlReportOpsLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(pnlReport, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(jPanel7, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .add(10, 10, 10))
        );
        pnlReportOpsLayout.setVerticalGroup(
            pnlReportOpsLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(pnlReportOpsLayout.createSequentialGroup()
                .addContainerGap()
                .add(pnlReportOpsLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel37)
                    .add(jLabel39)
                    .add(lblRRStyle)
                    .add(tbxTestID, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(btnRetrieveTest))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel7, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(pnlReport, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        tbpMain.addTab("Result & Report", pnlReportOps);

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel43.setText("Search User:");

        cbxUSearchType.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "By User ID", "By User Name" }));

        btnUSearch.setText("Go");
        btnUSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUSearchActionPerformed(evt);
            }
        });

        tblUsers.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null}
            },
            new String [] {
                "User ID", "First Name", "Last Name", "User Type"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        tblUsers.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                tblUsersMousePressed(evt);
            }
        });
        jScrollPane7.setViewportView(tblUsers);

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jScrollPane7, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(tbxUSearch)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(btnUSearch))
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(jLabel43)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(cbxUSearchType, 0, 208, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel43)
                    .add(cbxUSearchType, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(tbxUSearch, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(btnUSearch))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane7)
                .addContainerGap())
        );

        jPanel5.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel44.setText("User ID:");

        jLabel45.setText("First Name:");

        jLabel46.setText("Last Name:");

        jLabel47.setText("Birth Date:");

        jLabel48.setText("Enroll Date:");

        lblUEnrollDate.setText("2000/01/01");

        jLabel50.setText("Address:");

        jLabel51.setText("Zipcode:");

        jLabel52.setText("Phone #:");

        jLabel53.setText("User Type:");

        cbxUUserType.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "LABTECH", "DOCTOR", "ADMIN" }));
        cbxUUserType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxUUserTypeActionPerformed(evt);
            }
        });

        btnUAdd.setText("Add");
        btnUAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUAddActionPerformed(evt);
            }
        });

        btnUUpdate.setText("Update");
        btnUUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUUpdateActionPerformed(evt);
            }
        });

        btnUDelete.setText("Delete");
        btnUDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUDeleteActionPerformed(evt);
            }
        });

        btnReset.setText("Change Password");
        btnReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetActionPerformed(evt);
            }
        });

        jLabel49.setText("Password:");

        jLabel57.setText("Format: YYYY/MM/DD");

        jLabel58.setText("Format: 27858");

        jLabel59.setText("Format: 252-000-1234");

        btnClear.setText("Clear");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel5Layout = new org.jdesktop.layout.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel5Layout.createSequentialGroup()
                        .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jPanel5Layout.createSequentialGroup()
                                .add(jLabel52)
                                .add(1, 1, 1))
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, jLabel50))
                        .add(30, 30, 30)
                        .add(tbxUAddress1))
                    .add(jPanel5Layout.createSequentialGroup()
                        .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jLabel44)
                            .add(jLabel46)
                            .add(jLabel47)
                            .add(jLabel45))
                        .add(12, 12, 12)
                        .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(tbxULastName)
                            .add(tbxUFirstName)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, tbxUBirthDate)
                            .add(tbxUUserID)
                            .add(jPanel5Layout.createSequentialGroup()
                                .add(jLabel57)
                                .add(0, 0, Short.MAX_VALUE))))
                    .add(jPanel5Layout.createSequentialGroup()
                        .add(85, 85, 85)
                        .add(tbxUAddress2))
                    .add(jPanel5Layout.createSequentialGroup()
                        .add(jLabel48)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(lblUEnrollDate)
                        .add(0, 0, Short.MAX_VALUE))
                    .add(jPanel5Layout.createSequentialGroup()
                        .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(jPanel5Layout.createSequentialGroup()
                                .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(jPanel5Layout.createSequentialGroup()
                                        .add(jLabel53)
                                        .add(18, 18, 18)
                                        .add(cbxUUserType, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 128, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                    .add(jPanel5Layout.createSequentialGroup()
                                        .add(jLabel51)
                                        .add(31, 31, 31)
                                        .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                            .add(tbxUPhone, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 127, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                            .add(tbxUZipcode, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 80, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                            .add(jLabel58)
                                            .add(jLabel59))))
                                .add(0, 16, Short.MAX_VALUE))
                            .add(jPanel5Layout.createSequentialGroup()
                                .add(jLabel49)
                                .add(18, 18, 18)
                                .add(tbxUPwd)))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                                .add(btnUAdd, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .add(btnUUpdate, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, btnUDelete, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 88, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(btnClear, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 88, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))))
            .add(jPanel5Layout.createSequentialGroup()
                .add(btnReset, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 142, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel44)
                    .add(tbxUUserID, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(tbxUFirstName, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel45))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(tbxULastName, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel46))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(tbxUBirthDate, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel47))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jLabel57)
                .add(7, 7, 7)
                .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel48)
                    .add(lblUEnrollDate))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(tbxUAddress1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel50))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(tbxUAddress2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(jPanel5Layout.createSequentialGroup()
                        .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(tbxUZipcode, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jLabel51))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jLabel58)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(tbxUPhone, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jLabel52))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jLabel59))
                    .add(jPanel5Layout.createSequentialGroup()
                        .add(btnClear)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(btnUAdd)))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(cbxUUserType, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel53)
                    .add(btnUUpdate))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(btnUDelete)
                        .add(jLabel49))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, tbxUPwd, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(btnReset)
                .addContainerGap(9, Short.MAX_VALUE))
        );

        jLabel54.setText("To add a user, please press 'Clear' first.");

        lblUHint.setForeground(new java.awt.Color(0, 153, 51));
        lblUHint.setText("Wrong format. Example: 00000");

        org.jdesktop.layout.GroupLayout pnlUserOpsLayout = new org.jdesktop.layout.GroupLayout(pnlUserOps);
        pnlUserOps.setLayout(pnlUserOpsLayout);
        pnlUserOpsLayout.setHorizontalGroup(
            pnlUserOpsLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(pnlUserOpsLayout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(pnlUserOpsLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(pnlUserOpsLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                        .add(org.jdesktop.layout.GroupLayout.TRAILING, jLabel54)
                        .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel5, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, lblUHint))
                .addContainerGap())
        );
        pnlUserOpsLayout.setVerticalGroup(
            pnlUserOpsLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(pnlUserOpsLayout.createSequentialGroup()
                .addContainerGap()
                .add(pnlUserOpsLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(pnlUserOpsLayout.createSequentialGroup()
                        .add(jLabel54)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel5, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(lblUHint)))
                .addContainerGap())
        );

        tbpMain.addTab("User Management", pnlUserOps);

        btnLogout.setText("Logout");
        btnLogout.setToolTipText("");
        btnLogout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLogoutActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        jLabel1.setText("Welcome to our MTMS system!");
        jLabel1.setToolTipText("");

        lblLoginName.setText("Wecome, Guest!");
        lblLoginName.setToolTipText("");

        tbxError.setEditable(false);
        tbxError.setBackground(new java.awt.Color(240, 240, 240));
        tbxError.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        tbxError.setForeground(new java.awt.Color(0, 153, 51));

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(15, 15, 15)
                .add(jLabel1)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(lblLoginName)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(btnLogout))
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(tbpMain))
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(tbxError))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel1)
                    .add(btnLogout)
                    .add(lblLoginName))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(tbpMain)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(tbxError, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnLogoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLogoutActionPerformed
        // TODO add your handling code here:
        if (fromLogin == null) return;
        //this.setVisible(false);
        fromLogin.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_btnLogoutActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
        lblHint.setVisible(false);
        lblPHint.setVisible(false);
        ShowInfo();
        tbxPDoctorID.setText(ThisUser.UserID);
        btnPCreate.setEnabled(true);
        btnPUpdate.setEnabled(false);
        btnPDelete.setEnabled(false);
        
        tbxNDoctorID.setText(ThisUser.UserID);
        btnTUpdate.setEnabled(false);
        btnTDelete.setEnabled(false);
        
        btnTSearch.getRootPane().setDefaultButton(btnTSearch);
        btnPSearch.getRootPane().setDefaultButton(btnPSearch);
        btnUSearch.getRootPane().setDefaultButton(btnUSearch);
        
        tbxError.setBackground(this.getBackground());
        
        tbxReport.setLineWrap(true);
        tbxReport.setWrapStyleWord(true);
        tbxResult.setLineWrap(true);
        tbxResult.setWrapStyleWord(true);

        RenderRR(new Test());
        ShowUInfo(new User());
        AccessControl();
    }//GEN-LAST:event_formWindowOpened
 
    //Show or hide controls according to user type
    public void AccessControl()
    {
        switch(ThisUser.UserType)
        {
            case DOCTOR:
                tbpMain.remove(4);
                break;
            case ADMIN:
                break;
            default:
                btnTestOrder1.setVisible(false);
                pnlPatientInfo.setVisible(false);
                pnlTestInfo.setVisible(false);
                pnlNewTest.setVisible(false);
                pnlReport.setVisible(false);
                tbpMain.remove(4);
                jLabel55.setVisible(false);
                jLabel56.setVisible(false);
                break;
        }
    }
    //Edit User information
    private void btnEditOthersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditOthersActionPerformed
        // TODO add your handling code here:
        lblHint.setVisible(false);
        Pattern namepattern = Pattern.compile("^[A-Z][a-zA-Z ,.'-]*$");
        String fn = tbxFirstName.getText().trim();
        if (!namepattern.matcher(fn).matches())
        {
            tbxError.setText("Invalid first name.");
            lblHint.setText("Unacceptable first name.");
            lblHint.setVisible(true);
            return ;
        }
        fn = fn.replace("'", "\\'");
        String ln = tbxLastName.getText().trim();
        if (!namepattern.matcher(ln).matches())
        {
            tbxError.setText("Invalid last name.");
            lblHint.setText("Unacceptable last name.");
            lblHint.setVisible(true);
            return ;
        }
        ln = ln.replace("'", "\\'"); 
        //String fn = tbxFirstName.getText().trim().replace("'", "\\'");
        //if (fn.equals(""))
        //{
        //    tbxError.setText("Empty first name.");
        //    return ;
        //}
        //String ln = tbxLastName.getText().trim().replace("'", "\\'");
        //if (ln.equals(""))
        //{
        //    tbxError.setText("Empty last name.");
        //    return ;
        //}
        Pattern pattern = Pattern.compile("[0-9]{4}/[0-9]{2}/[0-9]{2}");
        Pattern pattern2 = Pattern.compile("[0-9]{2}/[0-9]{2}/[0-9]{4}");
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy/MM/dd");
        Date bd = new Date();
        String tbd = tbxBirthDate.getText();
        if (pattern.matcher(tbd).matches())
        {
            //bd = sdf.parse(tbxBirthDate.getText());
            sdf = new SimpleDateFormat("yyyy/MM/dd");
        }
        else if (pattern2.matcher(tbd).matches())
        {
            sdf = new SimpleDateFormat("MM/dd/yyyy");
        }
        else
        {
            tbxError.setText("Invalid birthdate.");
            lblHint.setText("Wrong Format. Example: "+"2000/01/01");
            lblHint.setVisible(true);
            return ;
        }
        try
        {
            bd = sdf.parse(tbxBirthDate.getText());
        }
        catch(Exception e)
        {
            tbxError.setText("Invalid birthdate.");
            lblHint.setText("Wrong Format. Example: "+"2000/01/01");
            lblHint.setVisible(true);
            return ;
        }
        String Address = tbxAddress1.getText().replace("'", "\\'").replace(";", "");
        Address +=";";
        Address += tbxAddress2.getText().replace("'", "\\'").replace(";", "");
        if (Address.equals(";"))
        {
            tbxError.setText("Empty address.");
            return ;
        }
        pattern = Pattern.compile("[0-9]{5}");
        
        String zc = tbxZipcode.getText().trim().replace("'", "");
        if (!pattern.matcher(zc).matches())
        {
            tbxError.setText("Invalid zipcode.");
            lblHint.setText("Wrong Format. Example: "+"25858");
            lblHint.setVisible(true);
            return ;
        }
        
        String ph = tbxPhone.getText().trim().replace("'", "");
        pattern = Pattern.compile("[0-9]{3}\\-?[0-9]{3}\\-?[0-9]{4}");
        if (!pattern.matcher(ph).matches())
        {
            tbxError.setText("Invalid phone number.");
            lblHint.setText("Wrong Format. Example: "+"919-360-5662");
            lblHint.setVisible(true);
            return ;
        }
        ph = ph.replace("-", "");
        ph = ph.substring(0,3)+"-"+ph.substring(3,6)+"-"+ph.substring(6);
        
        User_Controller UC = new User_Controller("localhost", DBName, DBAccount, DBPwd);
        boolean flag = UC.UpdateUser(ThisUser.UserID, fn, ln, bd, Address, zc, ph);
        if (flag)
        {
            tbxError.setText("Update succeccful.");
        }
        else
        {
            tbxError.setText(UC.err);
        }
        try
        {
            ThisUser = (User)UC.SearchUser(ThisUser.UserID, "ID").get(0);
        }
        catch(Exception e)
        {
            ThisUser = new User();
        }
        ShowInfo();
    }//GEN-LAST:event_btnEditOthersActionPerformed

    //Change Password
    private void btnChangePwdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChangePwdActionPerformed
        // TODO add your handling code here:
        String op = tbxOldPwd.getText().replace("'", "");
        String np = tbxNewPwd1.getText();
        if (np.contains("'"))
        {
            tbxError.setText("Invalid charactor found.");
            return;
        }
        if (!np.equals(tbxNewPwd2.getText()))
        {
            tbxError.setText("Password confirmation failed.");
            return;
        }
        User_Controller UC = new User_Controller("localhost", DBName, DBAccount, DBPwd);
        if (UC.ChangePassword(ThisUser.UserID, op, np))
        {
            tbxError.setText("Password changed succeccfully.");
            tbxOldPwd.setText("");
            tbxNewPwd1.setText("");
            tbxNewPwd2.setText("");
        }
        else
        {
            tbxError.setText(UC.err);
        }
    }//GEN-LAST:event_btnChangePwdActionPerformed

    //Search patients
    private void btnPSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPSearchActionPerformed
        // TODO add your handling code here:
        String key = tbxPSearch.getText().trim().replace("'", "");
        int Method  = cbxPSearchType.getSelectedIndex();
        SearchPatients(Method, key);
    }//GEN-LAST:event_btnPSearchActionPerformed

    //Clear patient information
    private void btnPClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPClearActionPerformed
        // TODO add your handling code here:
        lblPHint.setVisible(false);
        ClearPInfo();
    }//GEN-LAST:event_btnPClearActionPerformed
  
    //Add a new patient
    private void btnPCreateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPCreateActionPerformed
        // TODO add your handling code here:
        lblPHint.setVisible(false);
        if(tbxPDoctorID.getText().equals(""))
        {
            tbxError.setText("Permission denied.");
            return ;
        }
        Pattern namepattern = Pattern.compile("^[A-Z][a-zA-Z ,.'-]*$");
        String fn = tbxPFirstName.getText().trim();
        if (!namepattern.matcher(fn).matches())
        {
            tbxError.setText("Invalid first name.");
            lblPHint.setText("Unacceptable first name.");
            lblPHint.setVisible(true);
            return ;
        }
        fn = fn.replace("'", "\\'");
        String ln = tbxPLastName.getText().trim();
        if (!namepattern.matcher(ln).matches())
        {
            tbxError.setText("Invalid last name.");
            lblPHint.setText("Unacceptable last name.");
            lblPHint.setVisible(true);
            return ;
        }
        ln = ln.replace("'", "\\'"); 
        Pattern pattern = Pattern.compile("[0-9]{4}/[0-9]{2}/[0-9]{2}");
        Pattern pattern2 = Pattern.compile("[0-9]{2}/[0-9]{2}/[0-9]{4}");
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy/MM/dd");
        Date bd = new Date();
        String tbd = tbxPBirthDate.getText();
        if (pattern.matcher(tbd).matches())
        {
            //bd = sdf.parse(tbxBirthDate.getText());
            sdf = new SimpleDateFormat("yyyy/MM/dd");
        }
        else if (pattern2.matcher(tbd).matches())
        {
            sdf = new SimpleDateFormat("MM/dd/yyyy");
        }
        else
        {
            tbxError.setText("Invalid birthdate.");
            lblPHint.setText("Wrong Format. Example: "+"2000/01/01");
            lblPHint.setVisible(true);
            return ;
        }
        try
        {
            bd = sdf.parse(tbxPBirthDate.getText());
        }
        catch(Exception e)
        {
            tbxError.setText("Invalid birthdate.");
            lblPHint.setText("Wrong Format. Example: "+"2000/01/01");
            lblPHint.setVisible(true);
            return ;
        }
        String Address = tbxPAddress1.getText().replace("'", "\\'").replace(";", "");
        Address +=";";
        Address += tbxPAddress2.getText().replace("'", "\\'").replace(";", "");
        if (Address.equals(";"))
        {
            tbxError.setText("Empty address.");
            return ;
        }
        pattern = Pattern.compile("[0-9]{5}");
        
        String zc = tbxPZipcode.getText().trim().replace("'", "");
        if (!pattern.matcher(zc).matches())
        {
            tbxError.setText("Invalid zipcode.");
            lblPHint.setText("Wrong Format. Example: "+"25858");
            lblPHint.setVisible(true);
            return ;
        }
        
        String ph = tbxPPhone.getText().trim().replace("'", "");
        pattern = Pattern.compile("[0-9]{3}\\-?[0-9]{3}\\-?[0-9]{4}");
        if (!pattern.matcher(ph).matches())
        {
            tbxError.setText("Invalid phone number.");
            lblPHint.setText("Wrong Format. Example: "+"919-360-5662");
            lblPHint.setVisible(true);
            return ;
        }
        ph = ph.replace("-", "");
        ph = ph.substring(0,3)+"-"+ph.substring(3,6)+"-"+ph.substring(6);
        Patient_Controller PC = new Patient_Controller("localhost", DBName, DBAccount, DBPwd);
        
        int id = PC.CreatePatient(fn, ln, (cbxPGender.getSelectedIndex()==0), bd, Address, zc, ph, ThisUser.UserID);
        if(id<=0)
        {
            tbxError.setText(PC.err);
            return;
        }
        ReturnedPatients = PC.SearchPatient(id);
        ShowPatients();
        tbxError.setText("Patient #" + id +" is added successfully.");
    }//GEN-LAST:event_btnPCreateActionPerformed

    //Select a patient from the list
    private void lslPatientsMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lslPatientsMousePressed
        // TODO add your handling code here:
        int n = -1;
        if (ReturnedPatients.size()<=0)
            return;
        try
        {
            n = lslPatients.getSelectedIndex();
        }
        catch(Exception e)
        {
            n = -1;
        }
        if (n<0) return;
        
        Patient p = (Patient)ReturnedPatients.get(n);
        if ((p.DoctorID.equals(ThisUser.UserID))||(ThisUser.UserType==User.U_Types.ADMIN))
            ShowPInfo(p);    
        else
        {
            ShowPInfo(new Patient());
            tbxError.setText("Not your patient. Permission denied.");
        }
    }//GEN-LAST:event_lslPatientsMousePressed

    //Update information of a patient
    private void btnPUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPUpdateActionPerformed
        // TODO add your handling code here:
        lblPHint.setVisible(false);
        int pid = Integer.parseInt(lblPID.getText());
        if (pid<=0)
            return;
        if(tbxPDoctorID.getText().equals(""))
        {
            tbxError.setText("Permission denied.");
            return ;
        }
        if((!tbxPDoctorID.getText().equals(ThisUser.UserID))&&(ThisUser.UserType!=User.U_Types.ADMIN))
        {
            tbxError.setText("Not your patient. Permission denined");
            return ;
        }
        Pattern namepattern = Pattern.compile("^[A-Z][a-zA-Z ,.'-]*$");
        String fn = tbxPFirstName.getText().trim();
        if (!namepattern.matcher(fn).matches())
        {
            tbxError.setText("Invalid first name.");
            lblPHint.setText("Unacceptable first name.");
            lblPHint.setVisible(true);
            return ;
        }
        fn = fn.replace("'", "\\'");
        String ln = tbxPLastName.getText().trim();
        if (!namepattern.matcher(ln).matches())
        {
            tbxError.setText("Invalid last name.");
            lblPHint.setText("Unacceptable last name.");
            lblPHint.setVisible(true);
            return ;
        }
        ln = ln.replace("'", "\\'"); 
        Pattern pattern = Pattern.compile("[0-9]{4}/[0-9]{2}/[0-9]{2}");
        Pattern pattern2 = Pattern.compile("[0-9]{2}/[0-9]{2}/[0-9]{4}");
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy/MM/dd");
        Date bd = new Date();
        String tbd = tbxPBirthDate.getText();
        if (pattern.matcher(tbd).matches())
        {
            //bd = sdf.parse(tbxBirthDate.getText());
            sdf = new SimpleDateFormat("yyyy/MM/dd");
        }
        else if (pattern2.matcher(tbd).matches())
        {
            sdf = new SimpleDateFormat("MM/dd/yyyy");
        }
        else
        {
            tbxError.setText("Invalid birthdate.");
            lblPHint.setText("Wrong Format. Example: "+"2000/01/01");
            lblPHint.setVisible(true);
            return ;
        }
        try
        {
            bd = sdf.parse(tbxPBirthDate.getText());
        }
        catch(Exception e)
        {
            tbxError.setText("Invalid birthdate.");
            lblPHint.setText("Wrong Format. Example: "+"2000/01/01");
            lblPHint.setVisible(true);
            return ;
        }
        String Address = tbxPAddress1.getText().replace("'", "\\'").replace(";", "");
        Address +=";";
        Address += tbxPAddress2.getText().replace("'", "\\'").replace(";", "");
        if (Address.equals(";"))
        {
            tbxError.setText("Empty address.");
            return ;
        }
        pattern = Pattern.compile("[0-9]{5}");
        
        String zc = tbxPZipcode.getText().trim().replace("'", "");
        if (!pattern.matcher(zc).matches())
        {
            tbxError.setText("Invalid zipcode.");
            lblPHint.setText("Wrong Format. Example: "+"25858");
            lblPHint.setVisible(true);
            return ;
        }
        
        String ph = tbxPPhone.getText().trim().replace("'", "");
        pattern = Pattern.compile("[0-9]{3}\\-?[0-9]{3}\\-?[0-9]{4}");
        if (!pattern.matcher(ph).matches())
        {
            tbxError.setText("Invalid phone number.");
            lblPHint.setText("Wrong Format. Example: "+"919-360-5662");
            lblPHint.setVisible(true);
            return ;
        }
        ph = ph.replace("-", "");
        ph = ph.substring(0,3)+"-"+ph.substring(3,6)+"-"+ph.substring(6);
        Patient_Controller PC = new Patient_Controller("localhost", DBName, DBAccount, DBPwd);
        
        boolean flag = PC.UpdatePatient(pid, fn, ln, (cbxPGender.getSelectedIndex()==0), bd, Address, zc, ph, tbxPDoctorID.getText());
        if(!flag)
        {
            tbxError.setText(PC.err);
            return;
        }
        
        String key = tbxPSearch.getText().trim().replace("'", "");
        //int Method  = cbxPSearchType.getSelectedIndex();
        int Method = 0;
        //int tt = lslPatients.getSelectedIndex();
        int tt = pid;
        SearchPatients(Method, key);
        tbxError.setText("Updated Patient #" + pid +" successfully.");
        try
        {
            lslPatients.setSelectedIndex(tt);
            ShowPInfo((Patient)ReturnedPatients.get(tt));
        }
        catch(Exception e){}
    }//GEN-LAST:event_btnPUpdateActionPerformed

    //Delete a patient
    private void btnPDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPDeleteActionPerformed
        // TODO add your handling code here:
        lblPHint.setVisible(false);
        int pid = Integer.parseInt(lblPID.getText());
        if (pid<=0)
            return;
        if ((ThisUser.UserType!=User.U_Types.ADMIN)&&(!tbxPDoctorID.getText().equals(ThisUser.UserID)))
        {
            tbxError.setText("Permission denied.");
            return;
        }
        String msg = "You are about to delete patient #"+String.valueOf(pid)+". \r\nDo you wish to continue?";
        int x = JOptionPane.showConfirmDialog(this, msg, "Do you wish to continue?",JOptionPane.YES_NO_OPTION);
        if (x!=0)
            return;
        Patient_Controller PC = new Patient_Controller("localhost", DBName, DBAccount, DBPwd);
        
        boolean flag = PC.DeletePatient(pid);
        if(!flag)
        {
            tbxError.setText(PC.err);
        }
        String key = tbxPSearch.getText().trim().replace("'", "");
        int Method  = cbxPSearchType.getSelectedIndex();
        SearchPatients(Method, key);  
        tbxError.setText("Deletion successful.");
    }//GEN-LAST:event_btnPDeleteActionPerformed

    private void btnTDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTDeleteActionPerformed
        // TODO add your handling code here:
        int tid = Integer.parseInt(lblTestID.getText());
        if (tid<=0)
            return;
        String msg = "You are about to delete test #"+String.valueOf(tid)+". \r\nDo you wish to continue?";
        int x = JOptionPane.showConfirmDialog(this, msg, "Do you wish to continue?",JOptionPane.YES_NO_OPTION);
        if (x!=0)
            return;
        Test_Controller TC = new Test_Controller("localhost", DBName, DBAccount, DBPwd);
        boolean flag = TC.DeleteTest(tid);
        if(!flag)
        {
            tbxError.setText(TC.err);
            return;
        }
        String key = tbxTSearch.getText().trim().replace("'", "");
        int Method  = cbxTSearchType.getSelectedIndex();
        SearchTests(Method, key);  
        tbxError.setText("Deletion successful.");
    }//GEN-LAST:event_btnTDeleteActionPerformed

    //Search tests
    private void btnTSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTSearchActionPerformed
        String key = tbxTSearch.getText().trim().replace("'", "");
        int Method  = cbxTSearchType.getSelectedIndex();
        SearchTests(Method, key);
    }//GEN-LAST:event_btnTSearchActionPerformed

    private void btnTClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTClearActionPerformed
        // TODO add your handling code here:
        tbxNTestType.setText("");
        tbxNPatientID.setText("");
        tbxTestDes2.setText("");
    }//GEN-LAST:event_btnTClearActionPerformed

    //Update basic information of a test
    private void btnTUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTUpdateActionPerformed
        // TODO add your handling code here:
        int tid = Integer.parseInt(lblTestID.getText());
        if (tid<=0)
            return;
        if(tbxNDoctorID.getText().equals(""))
        {
            tbxError.setText("Permission denied.");
            return ;
        }
        String tt = tbxTestType.getText().trim().replace("'", "");
        if (tt.equals(""))
        {
            tbxError.setText("Empty test type.");
            return ;
        }
        String td = tbxTestDes.getText().trim().replace("'", "");
        if (td.equals(""))
        {
            td = "(empty)";
            tbxTestDes.setText(td);
        }
        Test_Controller TC = new Test_Controller("localhost", DBName, DBAccount, DBPwd);
        boolean flag = TC.UpdateTest(tid, tt, td, ThisUser.UserID);
        if(!flag)
        {
            tbxError.setText(TC.err);
            return;
        }
        //String key = tbxTSearch.getText().trim().replace("'", "");
        //int Method  = cbxTSearchType.getSelectedIndex();
        String key = String.valueOf(tid);
        int Method = 0;
        SearchTests(Method, key);
        tbxError.setText("Updated Test #" + tid +" successfully.");
        int t = tblTests.getSelectedRow();
        try
        {
            ShowTInfo((Test)ReturnedTests.get(t));
        }
        catch(Exception e){}
    }//GEN-LAST:event_btnTUpdateActionPerformed

    //Order a test
    private void btnOrderTestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOrderTestActionPerformed
        // TODO add your handling code here:
        String tt = tbxNTestType.getText().trim().replace("'", "");
        if (tt.equals(""))
        {
            tbxError.setText("Empty test type.");
            return ;
        }
        int pid = -1;
        try{
            pid = Integer.parseInt(tbxNPatientID.getText().trim().replace("'", ""));
        }
        catch(Exception e) {pid = -1;}
        if (pid<=0)
        {
            tbxError.setText("Please input a positive patient ID number.");
            return;
        }
        String td = tbxTestDes2.getText().trim().replace("'", "");
        if (td.equals(""))
        {
            td = "(empty)";
            tbxTestDes.setText(td);
        }
        Test_Controller TC = new Test_Controller("localhost", DBName, DBAccount, DBPwd);
        int tid = TC.OrderTest(pid, ThisUser.UserID, new Date(), tt, td);
        if(tid<=0)
        {
            tbxError.setText(TC.err);
            return;
        }
        ReturnedTests = TC.SearchTest(tid, "Test");
        ShowTests();
        tbxError.setText("Test #" + tid +" is added successfully.");
        tbxNTestType.setText("");
        tbxNPatientID.setText("");
        tbxTestDes2.setText("");
    }//GEN-LAST:event_btnOrderTestActionPerformed

    private void tblTestsMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblTestsMousePressed
        // TODO add your handling code here:
        int n = -1;
        if (ReturnedTests.size()<=0)
            return;
        try
        {
            n = tblTests.getSelectedRow();
        }
        catch(Exception e)
        {
            n = -1;
        }
        if (n<0) return;
        
        Test t = (Test)ReturnedTests.get(n);
        ShowTInfo(t);
        RenderRR(t);
    }//GEN-LAST:event_tblTestsMousePressed

    //Order a test from a patient
    private void btnTestOrder1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTestOrder1ActionPerformed
        // TODO add your handling code here:
        int n = -1;
        if (ReturnedPatients.size()<=0)
            return;
        try
        {
            n = lslPatients.getSelectedIndex();
        }
        catch(Exception e)
        {
            n = -1;
        }
        if (n<0) return;
        int pid = ((Patient)ReturnedPatients.get(n)).PatientID;
        tbxNTestType.setText("Basic");
        tbxNPatientID.setText(String.valueOf(pid));
        tbxTestDes2.setText("Basic test for patient #" + pid + ".");
        tbpMain.setSelectedIndex(2);
    }//GEN-LAST:event_btnTestOrder1ActionPerformed

    //Change current test
    private void btnRetrieveTestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRetrieveTestActionPerformed
        // TODO add your handling code here:
        int tid = -1;
        try
        {
            tid = Integer.parseInt(tbxTestID.getText());
        }
        catch(Exception e)
        {
            tid = -1;
        }
        if (tid <= 0)
        {
            tbxError.setText("Invalid test ID.");
            RenderRR(new Test());
            return;
        }
        Test_Controller TC = new Test_Controller("localhost", DBName, DBAccount, DBPwd);
        ArrayList temp = TC.SearchTest(tid, "Test");
        if (temp.size()<=0)
        {
            tbxError.setText(TC.err);
            RenderRR(new Test());
            return;
        }
        tbxError.setText("Current test changed.");
        Test t = (Test)temp.get(0);
        RenderRR(t);
    }//GEN-LAST:event_btnRetrieveTestActionPerformed

    //Update result
    private void btnInputResultActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInputResultActionPerformed
        // TODO add your handling code here:
        Test_Controller TC = new Test_Controller("localhost", DBName, DBAccount, DBPwd);
        int tid = SelectedTest.TestID;
        if ((tid<=0)||(SelectedTest.Status.equals("NONE")))
        {
            tbxError.setText("No test to update.");
            return;
        }
        if (!SelectedTest.Status.equals("ORDERED"))
        {
            String msg = "The test may already have a result. \r\nDo you wish to continue?";
            int x = JOptionPane.showConfirmDialog(this, msg, "Do you wish to continue?",JOptionPane.YES_NO_OPTION);
            if (x!=0)
                return;
        }
        String td = tbxResult.getText().replace("'","\\'");
        if (td.trim().equals(""))
            td = "(empty)";
        boolean flag = false;
        flag = TC.FinishTest(tid, td, ThisUser.UserID);
        if (flag)
        {
            ArrayList temp = TC.SearchTest(tid, "Test");
            if (temp.size()<=0)
            {
                tbxError.setText(TC.err);
                RenderRR(new Test());
                return;
            }
            Test t = (Test)temp.get(0);
            RenderRR(t);
            SearchTests(0, String.valueOf(tid));
            tbxError.setText("Test finished.");
        }
        else
            tbxError.setText(TC.err);
    }//GEN-LAST:event_btnInputResultActionPerformed

    //Fill in a result from a test
    private void btnFillResultActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFillResultActionPerformed
        // TODO add your handling code here:
        int n = -1;
        if (ReturnedTests.size()<=0)
            return;
        try
        {
            n = tblTests.getSelectedRow();
        }
        catch(Exception e)
        {
            n = -1;
        }
        if (n<0) return;
        Test temp = (Test)ReturnedTests.get(n);
        RenderRR(temp);
        tbpMain.setSelectedIndex(3);
    }//GEN-LAST:event_btnFillResultActionPerformed

    //Update a report
    private void btnInputReportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInputReportActionPerformed
        // TODO add your handling code here:
        if (btnClearReport.isEnabled()) return;
        Test_Controller TC = new Test_Controller("localhost", DBName, DBAccount, DBPwd);
        int tid = SelectedTest.TestID;
        if (ThisUser.UserType == User.U_Types.LABTECH)
        {
            tbxError.setText("Permission denied.");
            return;
        }
        if ((tid<=0)||(SelectedTest.Status.equals("NONE")))
        {
            tbxError.setText("No test to update.");
            return;
        }
        if (SelectedTest.Status.equals("ORDERED"))
        {
            tbxError.setText("This test is not finished.");
            return;
        }
        if (!SelectedTest.Status.equals("FINISHED"))
        {
            String msg = "The test may already have a report. \r\nDo you wish to continue?";
            int x = JOptionPane.showConfirmDialog(this, msg, "Do you wish to continue?",JOptionPane.YES_NO_OPTION);
            if (x!=0)
                return;
        }
        String tr = tbxReport.getText().replace("'","\\'");
        if (tr.trim().equals(""))
            tr = "(empty)";
        boolean flag = false;
        flag = TC.ReportTest(tid, tr, ThisUser.UserID);
        if (flag)
        {
            ArrayList temp = TC.SearchTest(tid, "Test");
            if (temp.size()<=0)
            {
                tbxError.setText(TC.err);
                RenderRR(new Test());
                return;
            }
            Test t = (Test)temp.get(0);
            RenderRR(t);
            SearchTests(0, String.valueOf(tid));
            tbxError.setText("Test reported.");
        }
        else
            tbxError.setText(TC.err);
    }//GEN-LAST:event_btnInputReportActionPerformed

    //Search a user
    private void btnUSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUSearchActionPerformed
        // TODO add your handling code here:
        String key = tbxUSearch.getText().replace("'", "");
        int Method  = cbxUSearchType.getSelectedIndex();
        SearchUsers(Method, key);
    }//GEN-LAST:event_btnUSearchActionPerformed

    private void tblUsersMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblUsersMousePressed
        // TODO add your handling code here:
        int n = -1;
        if (ReturnedUsers.size()<=0)
            return;
        try
        {
            n = tblUsers.getSelectedRow();
        }
        catch(Exception e)
        {
            n = -1;
        }
        if (n<0) return;
        
        User t = (User)ReturnedUsers.get(n);
        ShowUInfo(t);
    }//GEN-LAST:event_tblUsersMousePressed

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        // TODO add your handling code here:
        ShowUInfo(new User());
    }//GEN-LAST:event_btnClearActionPerformed

    //Add a user
    private void btnUAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUAddActionPerformed
        // TODO add your handling code here:
        lblUHint.setVisible(false);
        if(ThisUser.UserType!=User.U_Types.ADMIN)
        {
            tbxError.setText("Permission denied.");
            return ;
        }
        String id = tbxUUserID.getText().trim().replace("'", "");
        if (id.equals(""))
        {
            tbxError.setText("Empty first name.");
            return ;
        }
        if (id.toLowerCase().equals("admin"))
        {
            tbxError.setText("Reserved user ID.");
            return ;
        }

        Pattern namepattern = Pattern.compile("^[A-Z][a-zA-Z ,.'-]*$");
        String fn = tbxUFirstName.getText().trim();
        if (!namepattern.matcher(fn).matches())
        {
            tbxError.setText("Invalid first name.");
            lblUHint.setText("Unacceptable first name.");
            lblUHint.setVisible(true);
            return ;
        }
        fn = fn.replace("'", "\\'");
        String ln = tbxULastName.getText().trim();
        if (!namepattern.matcher(ln).matches())
        {
            tbxError.setText("Invalid last name.");
            lblUHint.setText("Unacceptable last name.");
            lblUHint.setVisible(true);
            return ;
        }
        ln = ln.replace("'", "\\'"); 
        Pattern pattern = Pattern.compile("[0-9]{4}/[0-9]{2}/[0-9]{2}");
        Pattern pattern2 = Pattern.compile("[0-9]{2}/[0-9]{2}/[0-9]{4}");
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy/MM/dd");
        Date bd = new Date();
        String tbd = tbxUBirthDate.getText();
        if (pattern.matcher(tbd).matches())
        {
            //bd = sdf.parse(tbxBirthDate.getText());
            sdf = new SimpleDateFormat("yyyy/MM/dd");
        }
        else if (pattern2.matcher(tbd).matches())
        {
            sdf = new SimpleDateFormat("MM/dd/yyyy");
        }
        else
        {
            tbxError.setText("Invalid birthdate.");
            lblUHint.setText("Wrong Format. Example: "+"2000/01/01");
            lblUHint.setVisible(true);
            return ;
        }
        try
        {
            bd = sdf.parse(tbxUBirthDate.getText());
        }
        catch(Exception e)
        {
            tbxError.setText("Invalid birthdate.");
            lblUHint.setText("Wrong Format. Example: "+"2000/01/01");
            lblUHint.setVisible(true);
            return ;
        }
        String Address = tbxUAddress1.getText().replace("'", "\\'").replace(";", "");
        Address +=";";
        Address += tbxUAddress2.getText().replace("'", "\\'").replace(";", "");
        if (Address.equals(";"))
        {
            tbxError.setText("Empty address.");
            return ;
        }
        pattern = Pattern.compile("[0-9]{5}");
        
        String zc = tbxUZipcode.getText().trim().replace("'", "");
        if (!pattern.matcher(zc).matches())
        {
            tbxError.setText("Invalid zipcode.");
            lblUHint.setText("Wrong Format. Example: "+"25858");
            lblUHint.setVisible(true);
            return ;
        }
        
        String ph = tbxUPhone.getText().trim().replace("'", "");
        pattern = Pattern.compile("[0-9]{3}\\-?[0-9]{3}\\-?[0-9]{4}");
        if (!pattern.matcher(ph).matches())
        {
            tbxError.setText("Invalid phone number.");
            lblUHint.setText("Wrong Format. Example: "+"919-360-5662");
            lblUHint.setVisible(true);
            return ;
        }
        ph = ph.replace("-", "");
        ph = ph.substring(0,3)+"-"+ph.substring(3,6)+"-"+ph.substring(6);
        User.U_Types ut = User.U_Types.GUEST;
        switch(cbxUUserType.getSelectedIndex())
        {
            case 1:
                ut = User.U_Types.DOCTOR;
                break;
            case 2:
                ut = User.U_Types.ADMIN;
                break;
            default:
                ut = User.U_Types.LABTECH;
                break;
        }
        String pwd = tbxUPwd.getText().replace("'", "");
        User_Controller UC = new User_Controller("localhost", DBName, DBAccount, DBPwd);
        
        boolean flag = UC.CreateUser(id, pwd, fn, ln, bd, new Date(), Address, zc, ph, ut);
        if(!flag)
        {
            tbxError.setText(UC.err);
            return;
        }
        ReturnedUsers = UC.SearchUser(id, "ID");
        ShowUsers();
        tbxError.setText("User '" + id +"' is added successfully.");
    }//GEN-LAST:event_btnUAddActionPerformed

    private void btnUUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUUpdateActionPerformed
        // TODO add your handling code here:
        lblUHint.setVisible(false);
        if(ThisUser.UserType!=User.U_Types.ADMIN)
        {
            tbxError.setText("Permission denied.");
            return ;
        }
        String id = tbxUUserID.getText().trim().replace("'", "");
        if (id.equals(""))
        {
            tbxError.setText("Empty user ID.");
            return ;
        }

        Pattern namepattern = Pattern.compile("^[A-Z][a-zA-Z ,.'-]*$");
        String fn = tbxUFirstName.getText().trim();
        if (!namepattern.matcher(fn).matches())
        {
            tbxError.setText("Invalid first name.");
            lblUHint.setText("Unacceptable first name.");
            lblUHint.setVisible(true);
            return ;
        }
        fn = fn.replace("'", "\\'");
        String ln = tbxULastName.getText().trim();
        if (!namepattern.matcher(ln).matches())
        {
            tbxError.setText("Invalid last name.");
            lblUHint.setText("Unacceptable last name.");
            lblUHint.setVisible(true);
            return ;
        }
        ln = ln.replace("'", "\\'"); 
        Pattern pattern = Pattern.compile("[0-9]{4}/[0-9]{2}/[0-9]{2}");
        Pattern pattern2 = Pattern.compile("[0-9]{2}/[0-9]{2}/[0-9]{4}");
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy/MM/dd");
        Date bd = new Date();
        String tbd = tbxUBirthDate.getText();
        if (pattern.matcher(tbd).matches())
        {
            //bd = sdf.parse(tbxBirthDate.getText());
            sdf = new SimpleDateFormat("yyyy/MM/dd");
        }
        else if (pattern2.matcher(tbd).matches())
        {
            sdf = new SimpleDateFormat("MM/dd/yyyy");
        }
        else
        {
            tbxError.setText("Invalid birthdate.");
            lblUHint.setText("Wrong Format. Example: "+"2000/01/01");
            lblUHint.setVisible(true);
            return ;
        }
        try
        {
            bd = sdf.parse(tbxUBirthDate.getText());
        }
        catch(Exception e)
        {
            tbxError.setText("Invalid birthdate.");
            lblUHint.setText("Wrong Format. Example: "+"2000/01/01");
            lblUHint.setVisible(true);
            return ;
        }
        sdf = new SimpleDateFormat("yyyy/MM/dd");
        Date ed = new Date();
        try
        {
            ed = sdf.parse(lblUEnrollDate.getText());
        }
        catch(Exception e)
        {
        }
        
        String Address = tbxUAddress1.getText().replace("'", "\\'").replace(";", "");
        Address +=";";
        Address += tbxUAddress2.getText().replace("'", "\\'").replace(";", "");
        if (Address.equals(";"))
        {
            tbxError.setText("Empty address.");
            return ;
        }
        pattern = Pattern.compile("[0-9]{5}");
        
        String zc = tbxUZipcode.getText().trim().replace("'", "");
        if (!pattern.matcher(zc).matches())
        {
            tbxError.setText("Invalid zipcode.");
            lblUHint.setText("Wrong Format. Example: "+"25858");
            lblUHint.setVisible(true);
            return ;
        }
        
        String ph = tbxUPhone.getText().trim().replace("'", "");
        pattern = Pattern.compile("[0-9]{3}\\-?[0-9]{3}\\-?[0-9]{4}");
        if (!pattern.matcher(ph).matches())
        {
            tbxError.setText("Invalid phone number.");
            lblUHint.setText("Wrong Format. Example: "+"919-360-5662");
            lblUHint.setVisible(true);
            return ;
        }
        ph = ph.replace("-", "");
        ph = ph.substring(0,3)+"-"+ph.substring(3,6)+"-"+ph.substring(6);
        User.U_Types ut = User.U_Types.GUEST;
        switch(cbxUUserType.getSelectedIndex())
        {
            case 1:
                ut = User.U_Types.DOCTOR;
                break;
            case 2:
                ut = User.U_Types.ADMIN;
                break;
            default:
                ut = User.U_Types.LABTECH;
                break;
        }
        //String pwd = tbxUPwd.getText().replace("'", "");
        
        User_Controller UC = new User_Controller("localhost", DBName, DBAccount, DBPwd);
        
        boolean flag = UC.UpdateUser(id, fn, ln, bd, ed, Address, zc, ph, ut);
        if(!flag)
        {
            tbxError.setText(UC.err);
            return;
        }
        ReturnedUsers = UC.SearchUser(id, "ID");
        ShowUsers();
        tbxError.setText("User '" + id +"' is updated successfully. Password not included.");
    }//GEN-LAST:event_btnUUpdateActionPerformed

    //Delete a user
    private void btnUDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUDeleteActionPerformed
        // TODO add your handling code here:
        String id = tbxUUserID.getText().trim().replace("'", "");
        if (id.equals(""))
        {
            tbxError.setText("Empty user ID.");
            return ;
        }
        if (id.equals("admin"))
        {
            tbxError.setText("This use can't be deleted.");
            return;
        }
        String msg = "You are about to delete user '"+id+"'. \r\nDo you wish to continue?";
        int x = JOptionPane.showConfirmDialog(this, msg, "Do you wish to continue?",JOptionPane.YES_NO_OPTION);
        if (x!=0)
            return;
        User_Controller UC = new User_Controller("localhost", DBName, DBAccount, DBPwd);
        
        boolean flag = UC.DeleteUser(id);
        if(!flag)
        {
            tbxError.setText(UC.err);
            return;
        }
        ReturnedUsers = new ArrayList();
        ShowUsers();
        tbxError.setText("User '" + id +"' is deleted successfully.");
    }//GEN-LAST:event_btnUDeleteActionPerformed

    private void btnResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetActionPerformed
        // TODO add your handling code here:
        lblUHint.setVisible(false);
        if(ThisUser.UserType!=User.U_Types.ADMIN)
        {
            tbxError.setText("Permission denied.");
            return ;
        }
        String id = tbxUUserID.getText().trim().replace("'", "");
        if (id.equals(""))
        {
            tbxError.setText("Empty user ID.");
            return ;
        }
        String pwd = tbxUPwd.getText().trim().replace("'", "");

        String msg = "You are about to change the password of user '"+id+"' \r\nto '"+pwd+"'. \r\nDo you wish to continue?";
        int x = JOptionPane.showConfirmDialog(this, msg, "Do you wish to continue?",JOptionPane.YES_NO_OPTION);
        if (x!=0)
            return;
        
        User_Controller UC = new User_Controller("localhost", DBName, DBAccount, DBPwd);
        
        boolean flag = UC.ChangePassword(id, pwd);
        if(!flag)
        {
            tbxError.setText(UC.err);
            return;
        }
        //ReturnedUsers = new ArrayList();
        //ShowUsers();
        tbxError.setText("Password for user '" + id +"' is changed successfully.");
        tbxUPwd.setText("");
    }//GEN-LAST:event_btnResetActionPerformed

    private void btnClearReportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearReportActionPerformed
        // TODO add your handling code here:
        if (SelectedTest.TestID<=0)
        {
            tbxReport.setText("");
            btnInputReport.setEnabled(false);
            btnClearReport.setEnabled(false);
            btnFull.setEnabled(false);
        }
        else
        {
            RenderRR(SelectedTest);
        }
    }//GEN-LAST:event_btnClearReportActionPerformed

    private void btnFullActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFullActionPerformed
        // TODO add your handling code here:
        if (SelectedTest.TestID<=0)
        {
            tbxReport.setText("");
            btnInputReport.setEnabled(false);
            btnClearReport.setEnabled(false);
            btnFull.setEnabled(false);
        }
        else
        {
            btnInputReport.setEnabled(false);
            btnClearReport.setEnabled(true);
            btnFull.setEnabled(false);
            tbxReport.setText(FullReport(SelectedTest));
            tbxReport.setLineWrap(true);
            tbxReport.setWrapStyleWord(true);
            tbxReport.setCaretPosition(0);
        }
    }//GEN-LAST:event_btnFullActionPerformed

    private void cbxUUserTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxUUserTypeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbxUUserTypeActionPerformed

    public void ClearPInfo()
    {
        lblPID.setText("00000");
        tbxPFirstName.setText("");
        tbxPLastName.setText("");
        cbxPGender.setSelectedIndex(0);
        tbxPBirthDate.setText("");
        tbxPAddress1.setText("");
        tbxPAddress2.setText("");
        tbxPZipcode.setText("");
        tbxPPhone.setText("");
        tbxPDoctorID.setText(ThisUser.UserID);  
        btnPCreate.setEnabled(true);
        btnPUpdate.setEnabled(false);
        btnPDelete.setEnabled(false);
    }
    
    //Show information of a patient
    public void ShowPInfo(Patient p)
    {
        if (p.PatientID<=0)
        {
            ClearPInfo();
            return;
        }
        if ((ThisUser.UserType!= User.U_Types.ADMIN)&&
                (!p.DoctorID.equals(ThisUser.UserID)))
        {
            tbxError.setText("You are not allowed to see this patient's information.");
            ClearPInfo();
            return;
        }
        lblPID.setText(PIDtoString(p.PatientID));
        tbxPFirstName.setText(p.FirstName);
        tbxPLastName.setText(p.LastName);
        cbxPGender.setSelectedIndex(p.Gender?0:1);
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy/MM/dd");
        String date = sdf.format(p.BirthDate);
        tbxPBirthDate.setText(date);
        
        String[] Addr = p.Address.split(";");
        
        if (Addr.length >=2)
        {
            tbxPAddress1.setText(Addr[0]);
            tbxPAddress2.setText(Addr[1]);
        }
        else
        {
            tbxPAddress1.setText(Addr[0]);
            tbxPAddress2.setText("");
        }
        
        tbxPZipcode.setText(p.Zipcode);
        tbxPPhone.setText(p.PhoneNumber);
        tbxPDoctorID.setText(p.DoctorID);  
        btnPCreate.setEnabled(false);
        btnPUpdate.setEnabled(true);
        btnPDelete.setEnabled(true);
    }
    
    //Show User information
    public void ShowInfo()
    {
        if (ThisUser == null)
        {
            lblLoginName.setText("Welcome, GUEST!");
            lblInfo.setText("Guest's Information");
            return;
        }
        else
        {
            lblLoginName.setText("Welcome, " + ThisUser.FirstName);
            lblInfo.setText(ThisUser.FirstName +"'s Information");
        }
        
        tbxUserID.setText(ThisUser.UserID);
        tbxUserName.setText(ThisUser.FirstName +" "+ ThisUser.LastName);
        String role = ThisUser.getType();
        lblUserRole.setText(role);
        
        tbxFirstName.setText(ThisUser.FirstName);
        tbxLastName.setText(ThisUser.LastName);
        
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy/MM/dd");
        String date = sdf.format(ThisUser.EnrollDate);
        jLabel9.setText("Enrolled since " + date);
        
        date = sdf.format(ThisUser.BirthDate);
        tbxBirthDate.setText(date);
        
        String[] Addr = ThisUser.Address.split(";");
        
        if (Addr.length >=2)
        {
            tbxAddress1.setText(Addr[0]);
            tbxAddress2.setText(Addr[1]);
        }
        else
        {
            tbxAddress1.setText(Addr[0]);
            tbxAddress2.setText("");
        }
        tbxZipcode.setText(ThisUser.Zipcode);
        tbxPhone.setText(ThisUser.PhoneNumber);
    }
    
    //Search Patients
    public void SearchPatients(int Method, String key)
    {
        lslPatients.removeAll();
        ReturnedPatients = new ArrayList();
        
        if (key.equals(""))
        {
            tbxError.setText("Empty key words.");
            return;
        }
        int id = -1;
        try
        {
            id = Integer.parseInt(key);
        }
        catch(Exception e)
        {
            id = -1;
        }
        Patient_Controller PC = new Patient_Controller("localhost", DBName, DBAccount, DBPwd);
        switch(Method)
        {
            case 0:
                if(id<=0)
                {
                    tbxError.setText("Please input a positive ID number.");
                    return;
                }
                ReturnedPatients = PC.SearchPatient(id);
                break;
            case 1:
                ReturnedPatients = PC.SearchPatient(key);
                break;
            default:
                String[] names = key.split(" ");
                if (names.length>=2)
                    ReturnedPatients = PC.SearchPatient(names[0], names[1]);
                else
                    ReturnedPatients = PC.SearchPatient(key, "");
                break;
        }
        if (ReturnedPatients.size()<=0)
        {
            tbxError.setText("No patients found");
            String[] temp = new String[1];
            temp[0]="";
            lslPatients.setListData(temp);
        }
        else
            tbxError.setText(String.valueOf(ReturnedPatients.size())+" patient(s) returned.");
        ShowPatients();
    }
    
    //Show all the patients returned
    public void ShowPatients()
    {
        lslPatients.removeAll();
        int n = ReturnedPatients.size();
        if (n <= 0)
        {
            ClearPInfo();
            String[] temp = new String[1];
            temp[0]="";
            lslPatients.setListData(temp);
            return;
        }
        String[] ps = new String[n];
        for(int i=0;i<ReturnedPatients.size();i++)
        {
            Patient p = (Patient)ReturnedPatients.get(i);
            ps[i] = PIDtoString(p.PatientID) + ": "+p.FirstName+" "+p.LastName;
        }
        lslPatients.setListData(ps);
        lslPatients.setSelectedIndex(0);
        ShowPInfo((Patient)ReturnedPatients.get(0));
        btnPCreate.setEnabled(false);
    }
    
    //Set up the Result & Report panel
    public void RenderRR(Test t)
    {
        SelectedTest = t;
        if(t.TestID>0)
            tbxTestID.setText(String.valueOf(t.TestID));
        else
            tbxTestID.setText("");
        lblRRStyle.setText(t.Status);
        String type1, type2;
        String[] type = t.Comment.split(",");
        if (type.length>=2)
        {
            type1 = type[0];
            type2 = type[1];
        }
        else
        {
            type1 = type[0];
            type2 = "";
        }
        
        switch(t.Status)
        {
            case "ORDERED":
                tbxResultStatus.setText("Not updated");
                tbxResult.setText("");
                btnInputResult.setEnabled(true);
                
                tbxReportStatus.setText("Not updated");
                tbxReport.setText("");
                btnInputReport.setEnabled(false);
                btnClearReport.setEnabled(false);
                btnFull.setEnabled(false);
                break;
            case "FINISHED":
                if (type1.equals("")||type1.equals("Text"))
                {
                    tbxResultStatus.setText("Result as Text");
                    tbxResult.setText(t.TestRes);
                    btnInputResult.setEnabled(true);
                }
                else
                {
                    tbxResultStatus.setText("Result as " + type1);
                    tbxResult.setText("");
                    btnInputResult.setEnabled(true);
                }

                tbxReportStatus.setText("Not updated");
                tbxReport.setText("");
                btnInputReport.setEnabled(true);
                btnClearReport.setEnabled(false);
                btnFull.setEnabled(false);
                break;
            case "REPORTED":
                if (type1.equals("")||type1.equals("Text"))
                {
                    tbxResultStatus.setText("Result as Text");
                    tbxResult.setText(t.TestRes);
                    btnInputResult.setEnabled(true);
                }
                else
                {
                    tbxResultStatus.setText("Result as " + type1);
                    tbxResult.setText("");
                    btnInputResult.setEnabled(true);
                }
                if (type2.equals("")||type2.equals("Text"))
                {
                    tbxReportStatus.setText("Report as Text");
                    tbxReport.setText(t.Report);
                    btnInputReport.setEnabled(true);
                    btnClearReport.setEnabled(false);
                    btnFull.setEnabled(true);
                }
                else
                {
                    tbxReportStatus.setText("Report as " + type2);
                    tbxReport.setText("");
                    btnInputReport.setEnabled(true);
                }
                break;
            default:
                tbxResultStatus.setText("Not updated");
                tbxResult.setText("");
                btnInputResult.setEnabled(false);
                
                tbxReportStatus.setText("Not updated");
                tbxReport.setText("");
                btnInputReport.setEnabled(false);
                btnClearReport.setEnabled(false);
                btnFull.setEnabled(false);
                break;
        }
    }
    
    public String PIDtoString(int pid)
    {
        if (pid <= 0) return "00000";
        String n = String.valueOf(pid);
        int x = 5 - n.length();
        for(int i = 0;i < x;i++)
            n = "0" + n;
        return n;
    }
    
    //Search tests
    public void SearchTests(int Method, String key)
    {
        ReturnedTests = new ArrayList();
        
        if (key.equals(""))
        {
            tbxError.setText("Empty key words.");
            String[] temp = new String[1];
            temp[0]="";
            String[][] row=new String[1][4];
            String[] column={"Test ID","Patient ID","Doctor ID", "Test Date"};
            tblTests.removeAll();
            DefaultTableModel tmd=new DefaultTableModel(row,column);
            tblTests.setModel(tmd);
            return;
        }
        int id = -1;
        try
        {
            id = Integer.parseInt(key);
        }
        catch(Exception e)
        {
            id = -1;
        }
        Test_Controller TC = new Test_Controller("localhost", DBName, DBAccount, DBPwd);
        switch(Method)
        {
            case 0:
                if(id<=0)
                {
                    tbxError.setText("Please input a positive ID number.");
                    return;
                }
                ReturnedTests = TC.SearchTest(id, "Test");
                break;
            case 1:
                ReturnedTests = TC.SearchTest(id, "Patient");
                break;
            default:
                ReturnedTests = TC.SearchTest(key);
                break;
        }
        if (ReturnedTests.size()<=0)
        {
            tbxError.setText("No tests found");
            String[] temp = new String[1];
            temp[0]="";
            String[][] row=new String[1][4];
            String[] column={"Test ID","Patient ID","Doctor ID", "Test Date"};
            tblTests.removeAll();
            DefaultTableModel tmd=new DefaultTableModel(row,column);
            tblTests.setModel(tmd);
        }
        else
            tbxError.setText(String.valueOf(ReturnedTests.size())+" test(s) returned.");
        ShowTests();
    }
    
    //Show the returned tests in the table
    public void ShowTests()
    {
        tblTests.removeAll();
        String[] column={"Test ID","Patient ID","Doctor ID", "Test Date"};
        int n = ReturnedTests.size();
        if (n <= 0)
        {
            ShowTInfo(new Test());
            String[][] row=new String[1][4];
            tblTests.removeAll();
            DefaultTableModel tmd=new DefaultTableModel(row,column);
            tblTests.setModel(tmd);
            return;
        }
        String[][] ts = new String[n][4];
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy/MM/dd");
        for(int i=0;i<n;i++)
        {
            Test t = (Test)ReturnedTests.get(i);
            ts[i][0] = PIDtoString(t.TestID);
            ts[i][1] = PIDtoString(t.PatientID);
            ts[i][2] = t.DoctorID;
            ts[i][3] = sdf.format(t.TestDate);
            
        }
        tblTests.removeAll();
        DefaultTableModel tmd=new DefaultTableModel(ts,column);
        tblTests.setModel(tmd);

        ShowTInfo((Test)ReturnedTests.get(0));
    }
    
    //Show information of a test
    public void ShowTInfo(Test t)
    {
        if (t.TestID<=0)
        {
            lblTestID.setText("00000");
            tbxTestType.setText("");
            tbxOrderDate.setText("");
            tbxTestDes.setText("");
            tbxUpdater.setText("");
            lblTStatus.setText("NONE");
            btnTUpdate.setEnabled(false);
            btnTDelete.setEnabled(false);
            return;
        }
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy/MM/dd");
        lblTestID.setText(PIDtoString(t.TestID));
        tbxTestType.setText(t.TestType);
        tbxOrderDate.setText(sdf.format(t.TestDate));
        
        tbxTestDes.setText(t.TestDes);
        tbxTestDes.setLineWrap(true);
        tbxTestDes.setWrapStyleWord(true);
        tbxTestDes.setCaretPosition(0);
        
        tbxUpdater.setText(t.LastUpdatedBy);
        lblTStatus.setText(t.Status);
        
        
        //btnOrderTest.setEnabled(false);
        btnTUpdate.setEnabled(true);
        btnTDelete.setEnabled(true);
    }
    
    public String FullReport(Test t)
    {
        if (t.TestID<=0)
        {
            return "This is an empty test.";
        }
        String temp = "This is a full report of Test # "+PIDtoString(t.TestID)+".\r\n";
        temp+= "=====================================\r\n\r\n";
        temp+= "Patient ID: "+PIDtoString(t.PatientID)+"\t\tPatient Name: ";
        Patient_Controller PC = new Patient_Controller("localhost", DBName, DBAccount, DBPwd);
        ArrayList tempal = PC.SearchPatient(t.PatientID);
        String PName = "";
        if (tempal.size()<=0)
            PName = "Not a patient";
        else 
        {
            PName = ((Patient)tempal.get(0)).FirstName;
            PName += " " + ((Patient)tempal.get(0)).LastName;
        }
        temp+= PName +"\r\n";
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy/MM/dd");
        
        temp+= "Order Date: "+sdf.format(t.TestDate);
        temp+= "\r\nOrdered by: "+t.DoctorID;
        temp+= "\r\nTest Type: "+t.TestType;
        temp+= "\r\nDescription: "+t.TestDes;
        temp+= "\r\n=====================================\r\n\r\n";
        
        temp+="Last updated by: "+t.LastUpdatedBy;
        temp+="\r\nTest result:\r\n"+t.TestRes;
        temp+="\r\n\r\nTest report:\r\n"+t.Report;
        temp+="\r\n\r\n=====================================";
        
        return temp;
    }
    
    //Search users
    public void SearchUsers(int Method, String key)
    {
        String Type = "ID2";
        key = key.trim().replace(";", "");
        if (Method == 1)
        {
            key = key.trim().replace(" ", ";");
            Type = "Name";
        }
        
        User_Controller UC = new User_Controller("localhost", DBName, DBAccount, DBPwd);
        ReturnedUsers = UC.SearchUser(key, Type);
        if (ReturnedUsers.size()<=0)
        {
            tbxError.setText("No users found");
            String[][] row=new String[1][4];
            String[] column={"User ID","First Name","Last Name", "User Type"};
            tblUsers.removeAll();
            DefaultTableModel tmd=new DefaultTableModel(row,column);
            tblUsers.setModel(tmd);
        }
        else
        {
            tbxError.setText(String.valueOf(ReturnedUsers.size())+" user(s) returned.");
        }
        ShowUsers();
    }
    
    //Show information of returned users in the table
    public void ShowUsers()
    {
        tblUsers.removeAll();
        String[] column={"User ID","First Name","Last Name", "User Type"};
        int n = ReturnedUsers.size();
        if (n <= 0)
        {
            ShowUInfo(new User());
            String[][] row=new String[1][4];
            tblUsers.removeAll();
            DefaultTableModel tmd=new DefaultTableModel(row,column);
            tblUsers.setModel(tmd);
            return;
        }
        String[][] ts = new String[n][4];
        for(int i=0;i<n;i++)
        {
            User u = (User)ReturnedUsers.get(i);
            ts[i][0] = u.UserID;
            ts[i][1] = u.FirstName;
            ts[i][2] = u.LastName;
            ts[i][3] = u.getType();   
        }
        tblUsers.removeAll();
        DefaultTableModel tmd=new DefaultTableModel(ts,column);
        tblUsers.setModel(tmd);

        ShowUInfo((User)ReturnedUsers.get(0));
    }
    
    public void ShowUInfo(User u)
    {
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy/MM/dd");
        lblUHint.setVisible(false);
        tbxUPwd.setText("");
        if (u.UserID.equals(""))
        {
            tbxUUserID.setText("");
            tbxUFirstName.setText("");
            tbxULastName.setText("");
            tbxUBirthDate.setText("");
            lblUEnrollDate.setText(sdf.format(new Date()));
            tbxUAddress1.setText("");
            tbxUAddress2.setText("");
            tbxUZipcode.setText("");
            tbxUPhone.setText("");
            cbxUUserType.setSelectedIndex(0);
            
            btnUUpdate.setEnabled(false);
            btnUDelete.setEnabled(false);
            btnReset.setEnabled(false);
            tbxUUserID.setEditable(true);
            btnUAdd.setEnabled(true);
            return;
        }
        tbxUUserID.setText(u.UserID);
        tbxUFirstName.setText(u.FirstName);
        tbxULastName.setText(u.LastName);
        tbxUBirthDate.setText(sdf.format(u.BirthDate));
        lblUEnrollDate.setText(sdf.format(u.EnrollDate));
        
        String[] Addr = u.Address.split(";");
        
        if (Addr.length >=2)
        {
            tbxUAddress1.setText(Addr[0]);
            tbxUAddress2.setText(Addr[1]);
        }
        else
        {
            tbxUAddress1.setText(Addr[0]);
            tbxUAddress2.setText("");
        }
        tbxUZipcode.setText(u.Zipcode);
        tbxUPhone.setText(u.PhoneNumber);
        
        switch(u.UserType)
        {
            case LABTECH:
                cbxUUserType.setSelectedIndex(0);
                break;
            case DOCTOR:
                cbxUUserType.setSelectedIndex(1);
                break;
            case ADMIN:
                cbxUUserType.setSelectedIndex(2);
                break;
            default:
                cbxUUserType.setSelectedIndex(0);
                break;
        }
        
        btnUUpdate.setEnabled(true);
        btnUDelete.setEnabled(true);
        btnReset.setEnabled(true);
        btnUAdd.setEnabled(false);
        tbxUUserID.setEditable(false);
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MTMS_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MTMS_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MTMS_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MTMS_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MTMS_GUI().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnChangePwd;
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnClearReport;
    private javax.swing.JButton btnEditOthers;
    private javax.swing.JButton btnFillResult;
    private javax.swing.JButton btnFull;
    private javax.swing.JButton btnInputReport;
    private javax.swing.JButton btnInputResult;
    private javax.swing.JButton btnLogout;
    private javax.swing.JButton btnOrderTest;
    private javax.swing.JButton btnPClear;
    private javax.swing.JButton btnPCreate;
    private javax.swing.JButton btnPDelete;
    private javax.swing.JButton btnPSearch;
    private javax.swing.JButton btnPUpdate;
    private javax.swing.JButton btnReset;
    private javax.swing.JButton btnRetrieveTest;
    private javax.swing.JButton btnSearchTestByP;
    private javax.swing.JButton btnTClear;
    private javax.swing.JButton btnTDelete;
    private javax.swing.JButton btnTSearch;
    private javax.swing.JButton btnTUpdate;
    private javax.swing.JButton btnTestOrder1;
    private javax.swing.JButton btnUAdd;
    private javax.swing.JButton btnUDelete;
    private javax.swing.JButton btnUSearch;
    private javax.swing.JButton btnUUpdate;
    private javax.swing.JComboBox cbxPGender;
    private javax.swing.JComboBox cbxPSearchType;
    private javax.swing.JComboBox cbxTSearchType;
    private javax.swing.JComboBox cbxUSearchType;
    private javax.swing.JComboBox cbxUUserType;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel39;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel43;
    private javax.swing.JLabel jLabel44;
    private javax.swing.JLabel jLabel45;
    private javax.swing.JLabel jLabel46;
    private javax.swing.JLabel jLabel47;
    private javax.swing.JLabel jLabel48;
    private javax.swing.JLabel jLabel49;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel50;
    private javax.swing.JLabel jLabel51;
    private javax.swing.JLabel jLabel52;
    private javax.swing.JLabel jLabel53;
    private javax.swing.JLabel jLabel54;
    private javax.swing.JLabel jLabel55;
    private javax.swing.JLabel jLabel56;
    private javax.swing.JLabel jLabel57;
    private javax.swing.JLabel jLabel58;
    private javax.swing.JLabel jLabel59;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel60;
    private javax.swing.JLabel jLabel61;
    private javax.swing.JLabel jLabel62;
    private javax.swing.JLabel jLabel63;
    private javax.swing.JLabel jLabel64;
    private javax.swing.JLabel jLabel65;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JLabel lblHint;
    private javax.swing.JLabel lblInfo;
    private javax.swing.JLabel lblLoginName;
    private javax.swing.JLabel lblPHint;
    private javax.swing.JLabel lblPID;
    private javax.swing.JLabel lblRRStyle;
    private javax.swing.JLabel lblTStatus;
    private javax.swing.JLabel lblTestID;
    private javax.swing.JLabel lblUEnrollDate;
    private javax.swing.JLabel lblUHint;
    private javax.swing.JLabel lblUserRole;
    private javax.swing.JList lslPatients;
    private javax.swing.JPanel pnlNewTest;
    private javax.swing.JPanel pnlPatientInfo;
    private javax.swing.JPanel pnlPatientOps;
    private javax.swing.JPanel pnlReport;
    private javax.swing.JPanel pnlReportOps;
    private javax.swing.JPanel pnlTestInfo;
    private javax.swing.JPanel pnlTestOps;
    private javax.swing.JPanel pnlUserBasics;
    private javax.swing.JPanel pnlUserInfo;
    private javax.swing.JPanel pnlUserOps;
    private javax.swing.JPanel pnlUserOthers;
    private javax.swing.JTable tblTests;
    private javax.swing.JTable tblUsers;
    private javax.swing.JTabbedPane tbpMain;
    private javax.swing.JTextField tbxAddress1;
    private javax.swing.JTextField tbxAddress2;
    private javax.swing.JTextField tbxBirthDate;
    private javax.swing.JTextField tbxError;
    private javax.swing.JTextField tbxFirstName;
    private javax.swing.JTextField tbxLastName;
    private javax.swing.JTextField tbxNDoctorID;
    private javax.swing.JTextField tbxNPatientID;
    private javax.swing.JTextField tbxNTestType;
    private javax.swing.JPasswordField tbxNewPwd1;
    private javax.swing.JPasswordField tbxNewPwd2;
    private javax.swing.JPasswordField tbxOldPwd;
    private javax.swing.JTextField tbxOrderDate;
    private javax.swing.JTextField tbxPAddress1;
    private javax.swing.JTextField tbxPAddress2;
    private javax.swing.JTextField tbxPBirthDate;
    private javax.swing.JTextField tbxPDoctorID;
    private javax.swing.JTextField tbxPFirstName;
    private javax.swing.JTextField tbxPLastName;
    private javax.swing.JTextField tbxPPhone;
    private javax.swing.JTextField tbxPSearch;
    private javax.swing.JTextField tbxPZipcode;
    private javax.swing.JTextField tbxPhone;
    private javax.swing.JTextArea tbxReport;
    private javax.swing.JTextField tbxReportStatus;
    private javax.swing.JTextArea tbxResult;
    private javax.swing.JTextField tbxResultStatus;
    private javax.swing.JTextField tbxTSearch;
    private javax.swing.JTextArea tbxTestDes;
    private javax.swing.JTextArea tbxTestDes2;
    private javax.swing.JTextField tbxTestID;
    private javax.swing.JTextField tbxTestType;
    private javax.swing.JTextField tbxUAddress1;
    private javax.swing.JTextField tbxUAddress2;
    private javax.swing.JTextField tbxUBirthDate;
    private javax.swing.JTextField tbxUFirstName;
    private javax.swing.JTextField tbxULastName;
    private javax.swing.JTextField tbxUPhone;
    private javax.swing.JTextField tbxUPwd;
    private javax.swing.JTextField tbxUSearch;
    private javax.swing.JTextField tbxUUserID;
    private javax.swing.JTextField tbxUZipcode;
    private javax.swing.JTextField tbxUpdater;
    private javax.swing.JTextField tbxUserID;
    private javax.swing.JTextField tbxUserName;
    private javax.swing.JTextField tbxZipcode;
    // End of variables declaration//GEN-END:variables
}
